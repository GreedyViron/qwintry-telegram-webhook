// Telegram Bot –¥–ª—è Qwintry - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
// –¢–æ–∫–µ–Ω—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const ABACUS_API_KEY = process.env.ABACUS_API_KEY;

// –ú–∞–ø–ø–∏–Ω–≥ —Å–∫–ª–∞–¥–æ–≤ –Ω–∞ hubCode
const HUB_CODES = {
  US: "US1",   // –°–®–ê: 4 —Ç–∞—Ä–∏—Ñ–∞ (Flash, Economy, Air, Smart)
  DE: "EU1",   // –ì–µ—Ä–º–∞–Ω–∏—è: —Ç–æ–ª—å–∫–æ EcoPost (Qwintry Economy)
  UK: "UK1",   // –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è: —Ç–æ–ª—å–∫–æ EcoPost
  CN: "CN1",   // –ö–∏—Ç–∞–π: —Å–≤–æ–∏ Optima/Ultra
  ES: "ES1"    // –ò—Å–ø–∞–Ω–∏—è: —Ç–æ–ª—å–∫–æ EcoPost
};

// –ú–∞–ø–ø–∏–Ω–≥ countryId ‚Üí ISO –∫–æ–¥
const COUNTRY_ISO = {
  71: "RU",   // –†–æ—Å—Å–∏—è
  84: "KZ",   // –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
  149: "BY",  // –ë–µ–ª–∞—Ä—É—Å—å
  162: "UA",  // –£–∫—Ä–∞–∏–Ω–∞
  // –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
};

// –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤
const TARIFF_EMOJIS = {
  qwintry_flash: '‚ö°',
  ecopost: 'üåç',
  qwair: '‚úàÔ∏è',
  qwintry_smart: 'üöÄ',
  flash_optima: 'üî•',
  flash_ultra: 'üíé'
};

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –î–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–æ–≤
const WAREHOUSES = {
  US: { name: '–°–®–ê', code: 'US1', flag: 'üá∫üá∏' },
  DE: { name: '–ì–µ—Ä–º–∞–Ω–∏—è', code: 'DE1', flag: 'üá©üá™' },
  UK: { name: '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', code: 'UK1', flag: 'üá¨üáß' },
  CN: { name: '–ö–∏—Ç–∞–π', code: 'CN1', flag: 'üá®üá≥' },
  ES: { name: '–ò—Å–ø–∞–Ω–∏—è', code: 'ES1', flag: 'üá™üá∏' }
};

// –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω
const COUNTRIES = {
  71: { name: '–†–æ—Å—Å–∏—è', iso: 'RU' },
  84: { name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', iso: 'KZ' },
  149: { name: '–ë–µ–ª–∞—Ä—É—Å—å', iso: 'BY' },
  162: { name: '–£–∫—Ä–∞–∏–Ω–∞', iso: 'UA' }
};

// –î–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–æ–≤ (–æ—Å–Ω–æ–≤–Ω—ã–µ)
const CITIES = {
  71: { // –†–æ—Å—Å–∏—è
    4050: '–ú–æ—Å–∫–≤–∞',
    4079: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
    4051: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
    4052: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
    4053: '–ö–∞–∑–∞–Ω—å'
  },
  84: { // –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
    5001: '–ê–ª–º–∞—Ç—ã',
    5002: '–ù—É—Ä-–°—É–ª—Ç–∞–Ω',
    5003: '–®—ã–º–∫–µ–Ω—Ç'
  }
};

// –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const update = req.body;
    console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', JSON.stringify(update, null, 2));

    if (update.message) {
      await handleUserInput(update.message);
    } else if (update.callback_query) {
      await handleCallbackQuery(update.callback_query);
    }

    res.status(200).json({ ok: true });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
async function handleUserInput(message) {
  const chatId = message.chat.id;
  const text = message.text;
  const userId = message.from.id;

  console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userId}: "${text}"`);

  if (text === '/start') {
    await handleStart(chatId);
    return;
  }

  const userState = userStates.get(userId) || {};

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
  switch (userState.state) {
    case 'awaiting_country':
      await handleCountryInput(chatId, userId, text);
      break;
    case 'awaiting_city':
      await handleCityInput(chatId, userId, text);
      break;
    case 'awaiting_weight':
      await handleWeightInput(chatId, userId, text);
      break;
    case 'awaiting_ai_question':
      await handleAIQuestion(chatId, userId, text);
      break;
    default:
      await handleStart(chatId);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
async function handleCallbackQuery(callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;

  console.log(`üéØ Callback –æ—Ç ${userId}: ${data}`);

  await answerCallbackQuery(callbackQuery.id);

  if (data === 'calculator') {
    await showWarehouseSelection(chatId, userId);
  } else if (data === 'discounts') {
    await showDiscounts(chatId);
  } else if (data === 'faq') {
    await showFAQ(chatId);
  } else if (data === 'ai_consultant') {
    await startAIConsultant(chatId, userId);
  } else if (data === 'back_to_menu') {
    await showMainMenu(chatId);
  } else if (data.startsWith('warehouse_')) {
    const warehouseCode = data.replace('warehouse_', '');
    await handleWarehouseSelection(chatId, userId, warehouseCode);
  } else if (data.startsWith('country_')) {
    const countryId = parseInt(data.replace('country_', ''));
    await handleCountrySelection(chatId, userId, countryId);
  } else if (data.startsWith('city_')) {
    const cityId = parseInt(data.replace('city_', ''));
    await handleCitySelection(chatId, userId, cityId);
  }
}

// –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async function handleStart(chatId) {
  const welcomeText = `üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Qwintry Bot!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
üì¶ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
üí∞ –£–∑–Ω–∞—Ç—å –æ —Å–∫–∏–¥–∫–∞—Ö –∏ –∞–∫—Ü–∏—è—Ö
‚ùì –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:`;

  await showMainMenu(chatId, welcomeText);
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMainMenu(chatId, text = "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:") {
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üì¶ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏', callback_data: 'calculator' }],
      [{ text: 'üí∞ –°–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏', callback_data: 'discounts' }],
      [{ text: '‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã', callback_data: 'faq' }],
      [{ text: 'ü§ñ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç', callback_data: 'ai_consultant' }]
    ]
  };

  await sendMessage(chatId, text, keyboard);
}

// –í—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞
async function showWarehouseSelection(chatId, userId) {
  userStates.set(userId, { state: 'selecting_warehouse' });

  const text = "üì¶ **–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**";
  const keyboard = {
    inline_keyboard: [
      [
        { text: `${WAREHOUSES.US.flag} ${WAREHOUSES.US.name}`, callback_data: 'warehouse_US' },
        { text: `${WAREHOUSES.DE.flag} ${WAREHOUSES.DE.name}`, callback_data: 'warehouse_DE' }
      ],
      [
        { text: `${WAREHOUSES.UK.flag} ${WAREHOUSES.UK.name}`, callback_data: 'warehouse_UK' },
        { text: `${WAREHOUSES.CN.flag} ${WAREHOUSES.CN.name}`, callback_data: 'warehouse_CN' }
      ],
      [
        { text: `${WAREHOUSES.ES.flag} ${WAREHOUSES.ES.name}`, callback_data: 'warehouse_ES' }
      ],
      [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
    ]
  };

  await sendMessage(chatId, text, keyboard);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
async function handleWarehouseSelection(chatId, userId, warehouseCode) {
  const warehouse = WAREHOUSES[warehouseCode];
  if (!warehouse) {
    await sendMessage(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    return;
  }

  userStates.set(userId, {
    state: 'selecting_country',
    warehouse: warehouseCode,
    warehouseName: warehouse.name,
    hubCode: warehouse.code
  });

  await showCountrySelection(chatId, userId);
}

// –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã
async function showCountrySelection(chatId, userId) {
  const text = "üåç **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:**";
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üá∑üá∫ –†–æ—Å—Å–∏—è', callback_data: 'country_71' }],
      [{ text: 'üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', callback_data: 'country_84' }],
      [{ text: 'üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å', callback_data: 'country_149' }],
      [{ text: 'üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞', callback_data: 'country_162' }],
      [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–∫–ª–∞–¥–∞–º', callback_data: 'calculator' }]
    ]
  };

  await sendMessage(chatId, text, keyboard);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
async function handleCountrySelection(chatId, userId, countryId) {
  const country = COUNTRIES[countryId];
  if (!country) {
    await sendMessage(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    return;
  }

  const userState = userStates.get(userId);
  userState.state = 'selecting_city';
  userState.countryId = countryId;
  userState.countryName = country.name;
  userStates.set(userId, userState);

  await showCitySelection(chatId, userId, countryId);
}

// –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
async function showCitySelection(chatId, userId, countryId) {
  const cities = CITIES[countryId] || {};
  const cityButtons = Object.entries(cities).map(([id, name]) => 
    [{ text: name, callback_data: `city_${id}` }]
  );

  if (cityButtons.length === 0) {
    await sendMessage(chatId, "üèôÔ∏è **–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:**");
    const userState = userStates.get(userId);
    userState.state = 'awaiting_city';
    userStates.set(userId, userState);
    return;
  }

  const text = "üèôÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:**";
  const keyboard = {
    inline_keyboard: [
      ...cityButtons,
      [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º', callback_data: 'calculator' }]
    ]
  };

  await sendMessage(chatId, text, keyboard);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
async function handleCitySelection(chatId, userId, cityId) {
  const userState = userStates.get(userId);
  const cityName = CITIES[userState.countryId]?.[cityId] || `–ì–æ—Ä–æ–¥ ${cityId}`;

  userState.state = 'awaiting_weight';
  userState.cityId = cityId;
  userState.cityName = cityName;
  userStates.set(userId, userState);

  await sendMessage(chatId, `‚öñÔ∏è **–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–æ—Å—ã–ª–∫–∏ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:**\n\n–ü—Ä–∏–º–µ—Ä: 2.5 –∏–ª–∏ 3`);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ (—Ç–µ–∫—Å—Ç–æ–º)
async function handleCityInput(chatId, userId, cityName) {
  const userState = userStates.get(userId);
  
  // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ú–æ—Å–∫–≤—É –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç
  userState.state = 'awaiting_weight';
  userState.cityId = 4050; // –ú–æ—Å–∫–≤–∞
  userState.cityName = cityName;
  userStates.set(userId, userState);

  await sendMessage(chatId, `‚öñÔ∏è **–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–æ—Å—ã–ª–∫–∏ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:**\n\n–ü—Ä–∏–º–µ—Ä: 2.5 –∏–ª–∏ 3`);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–µ—Å–∞
async function handleWeightInput(chatId, userId, weightText) {
  const weight = parseFloat(weightText.replace(',', '.'));
  
  if (isNaN(weight) || weight <= 0 || weight > 50) {
    await sendMessage(chatId, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.1 –¥–æ 50 –∫–≥:");
    return;
  }

  const userState = userStates.get(userId);
  
  await sendMessage(chatId, "‚è≥ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏...");

  console.log(`üéØ –†–∞—Å—á–µ—Ç: —Å–∫–ª–∞–¥=${userState.warehouse}, hub=${userState.hubCode}, —Å—Ç—Ä–∞–Ω–∞=${userState.countryName} (${userState.countryId}), –≥–æ—Ä–æ–¥=${userState.cityName} (${userState.cityId}), –≤–µ—Å=${weight}–∫–≥`);

  const result = await calculateDelivery(weight, userState.countryId, userState.cityId, userState.warehouse);

  if (result.success) {
    const formattedResult = formatDeliveryResult(
  result.data,
  userState.warehouseName,
  userState.countryName,
  userState.cityName,
  weight,
  userState.warehouse  // ‚Üê –¥–æ–±–∞–≤—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä!
);
    await sendMessage(chatId, formattedResult);
  } else {
    await sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ –≤–µ—Å—É\n‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞\n\n–û—à–∏–±–∫–∞: ${result.error}`);
  }

  // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç', callback_data: 'calculator' }],
      [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
    ]
  };
  
  await sendMessage(chatId, "–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ä–∞—Å—á–µ—Ç?", keyboard);
  
  // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  userStates.delete(userId);
}

// –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async function calculateDelivery(weight, countryId, cityId, warehouseCode) {
  try {
    // –ü—Ä–∏–≤–æ–¥–∏–º —Å–∫–ª–∞–¥ –∫ hubCode
    const hubCode = HUB_CODES[warehouseCode] || "US1";
    // –ü—Ä–∏–≤–æ–¥–∏–º —Å—Ç—Ä–∞–Ω—É –∫ ISO (–µ—Å–ª–∏ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ ‚Üí –æ—Å—Ç–∞–≤–ª—è–µ–º id —Å—Ç—Ä–æ–∫–æ–π)
    const countryIso = COUNTRY_ISO[countryId] || countryId.toString();

    console.log(`üìä –†–∞—Å—á–µ—Ç: —Å–∫–ª–∞–¥=${warehouseCode}, hub=${hubCode}, —Å—Ç—Ä–∞–Ω–∞=${countryIso}, –≥–æ—Ä–æ–¥=${cityId}, –≤–µ—Å=${weight}–∫–≥`);

    const payload = {
      weight: weight.toString(),
      weightMeasurement: "kg",
      dimensions: "1x1x1",       // –∏–º–µ–Ω–Ω–æ —Ç–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ
      dimensionsMeasurement: "cm",
      hubCode,
      country: countryIso,
      city: cityId.toString(),
      zip: "100000",             // –¥–µ—Ñ–æ–ª—Ç –ú–æ—Å–∫–≤–∞ ‚Äî –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∏–∑ geoCity
      insurance: null,           // null = –±–µ–∑ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏
      itemsCost: "1",            // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤
      itemsCostInUSD: 1
    };

    console.log("üëâ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API:", payload);

    const response = await fetch("https://q3-api.qwintry.com/ru/frontend/calculator/calculate", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const data = await response.json();
    console.log("üì¶ –û—Ç–≤–µ—Ç API:", JSON.stringify(data, null, 2));

    if (!data.costs || Object.keys(data.costs).length === 0) {
      return { success: false, error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏" };
    }

    return { success: true, data };
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:", error);
    return { success: false, error: `–û—à–∏–±–∫–∞ API: ${error.message}` };
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function formatDeliveryResult(data, warehouseName, countryName, cityName, weight, warehouseCode) {
  if (!data.costs || Object.keys(data.costs).length === 0) {
    return "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.";
  }

  let costs = Object.entries(data.costs);

  // üîë —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è EU/UK/ES ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ ecopost
  if (["DE", "UK", "ES"].includes(warehouseCode)) {
    costs = costs.filter(([key]) => key === "ecopost");
  }

  let message = `üì¶ **–î–æ—Å—Ç–∞–≤–∫–∞ ${warehouseName} ‚Üí ${countryName}, ${cityName}**\n`;
  message += `‚öñÔ∏è –í–µ—Å: ${weight} –∫–≥\n\n`;

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ—ã –ø–æ —Ü–µ–Ω–µ (–æ—Ç –¥–µ—à–µ–≤–æ–≥–æ –∫ –¥–æ—Ä–æ–≥–æ–º—É)
  const sortedTariffs = costs
    .map(([key, option]) => ({
      key,
      option,
      price: option.cost?.totalCostWithDiscount || option.cost?.totalCost || 0
    }))
    .sort((a, b) => a.price - b.price);

  for (const { key, option } of sortedTariffs) {
    if (!option?.cost) continue;

    const emoji = TARIFF_EMOJIS[key] || 'üì¶';
    const label = option.cost.label || key;
    const price = option.cost.totalCostWithDiscount || option.cost.totalCost;
    const currency = option.cost.currency || '$';
    const days = option.days || '‚Äî';

    message += `${emoji} **${label}** ‚Äî ${currency}${price} (${days} –¥–Ω–µ–π)\n`;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–∞–≤–µ —Ü–µ–Ω—ã –¥–ª—è EU —Å–∫–ª–∞–¥–æ–≤
  if (["DE", "UK", "ES"].includes(warehouseCode) && sortedTariffs.length > 0) {
    message += `\nüí° **–°–æ—Å—Ç–∞–≤:** –¥–æ—Å—Ç–∞–≤–∫–∞ + –æ–±—Ä–∞–±–æ—Ç–∫–∞ $10 + –∫–æ–º–∏—Å—Å–∏—è ~3%`;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–º–æ–∂–Ω–µ
  if (data.country_info?.customs_limit) {
    message += `\nüí° **–¢–∞–º–æ–∂–Ω—è:** ${data.country_info.customs_limit}`;
  }

  message += `\n\nüîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ](https://qwintry.com/ru/calculator)`;

  return message;
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–∫–∏–¥–∫–∏
async function showDiscounts(chatId) {
  const text = `üí∞ **–°–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏ Qwintry:**

üéØ **–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Å–∫–∏–¥–∫–∏:**
‚Ä¢ –°–∫–∏–¥–∫–∞ –∑–∞ –æ–±—ä–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π
‚Ä¢ –ë–æ–Ω—É—Å—ã –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤

üî• **–¢–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏:**
‚Ä¢ –°–∫–∏–¥–∫–∞ 10% –Ω–∞ –ø–µ—Ä–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç \$100
‚Ä¢ –ö—ç—à–±—ç–∫ –∑–∞ –æ—Ç–∑—ã–≤—ã

üì± –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ –∞–∫—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ Qwintry.com`;

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
    ]
  };

  await sendMessage(chatId, text, keyboard);
}

// –ü–æ–∫–∞–∑–∞—Ç—å FAQ
async function showFAQ(chatId) {
  const text = `‚ùì **–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**

**Q: –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?**
A: –û—Ç 4-7 –¥–Ω–µ–π (—ç–∫—Å–ø—Ä–µ—Å—Å) –¥–æ 25-35 –¥–Ω–µ–π (—ç–∫–æ–Ω–æ–º), –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞.

**Q: –ö–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å?**
A: –ó–∞–ø—Ä–µ—â–µ–Ω—ã: –æ—Ä—É–∂–∏–µ, –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏, —Å–∫–æ—Ä–æ–ø–æ—Ä—Ç—è—â–∏–µ—Å—è –ø—Ä–æ–¥—É–∫—Ç—ã, –∂–∏–¥–∫–æ—Å—Ç–∏ –≤ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–∞—Ö.

**Q: –ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞?**
A: –ë–µ—Å–ø–æ—à–ª–∏–Ω–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –†–æ—Å—Å–∏–∏: 200‚Ç¨ –∏ 31–∫–≥. –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –æ–±–ª–∞–≥–∞–µ—Ç—Å—è –ø–æ—à–ª–∏–Ω–æ–π 15%.

**Q: –ú–æ–∂–Ω–æ –ª–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å—ã–ª–æ–∫?**
A: –î–∞, —É—Å–ª—É–≥–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Ç–∞—Ä–∏—Ñ–æ–≤.

**Q: –ö–∞–∫ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É?**
A: –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–∞ email, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.`;

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
    ]
  };

  await sendMessage(chatId, text, keyboard);
}

// –ó–∞–ø—É—Å–∫ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
async function startAIConsultant(chatId, userId) {
  userStates.set(userId, { state: 'awaiting_ai_question' });

  const text = `ü§ñ **AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç Qwintry**

–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –¥–æ—Å—Ç–∞–≤–∫–µ, —Ç–∞—Ä–∏—Ñ–∞—Ö, —Å—Ä–æ–∫–∞—Ö, —Ç–∞–º–æ–∂–Ω–µ –∏–ª–∏ —É—Å–ª—É–≥–∞—Ö Qwintry.

–ù–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "–ö–∞–∫–æ–π —Ç–∞—Ä–∏—Ñ –ª—É—á—à–µ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏?"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞?"
‚Ä¢ "–ö–∞–∫ –¥–æ–ª–≥–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –ø–æ—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ?"

üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:`;

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
    ]
  };

  await sendMessage(chatId, text, keyboard);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫ AI
async function handleAIQuestion(chatId, userId, question) {
  await sendMessage(chatId, "ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...");

  const response = await getAbacusResponse(question);
  
  const keyboard = {
    inline_keyboard: [
      [{ text: '‚ùì –ó–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å', callback_data: 'ai_consultant' }],
      [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
    ]
  };

  await sendMessage(chatId, `ü§ñ **AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç:**\n\n${response}`, keyboard);
  
  // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  userStates.delete(userId);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendMessage(chatId, text, keyboard = null) {
  try {
    const payload = {
      chat_id: chatId,
      text: text,
      parse_mode: 'Markdown',
      disable_web_page_preview: true
    };

    if (keyboard) {
      payload.reply_markup = keyboard;
    }

    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', errorData);
    } else {
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ callback query
async function answerCallbackQuery(callbackQueryId, text = '') {
  try {
    await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text: text
      }),
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ answerCallbackQuery:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Abacus AI
async function getAbacusResponse(message) {
  try {
    const response = await fetch('https://api.abacus.ai/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${ABACUS_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å Qwintry (–ë–∞–Ω–¥–µ—Ä–æ–ª—å–∫–∞). –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ü–æ–º–æ–≥–∞–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –¥–æ—Å—Ç–∞–≤–∫–µ, —Ç–∞—Ä–∏—Ñ–∞—Ö, —Å—Ä–æ–∫–∞—Ö, —Ç–∞–º–æ–∂–Ω–µ, —É–ø–∞–∫–æ–≤–∫–µ —Ç–æ–≤–∞—Ä–æ–≤. –£ Qwintry –µ—Å—Ç—å 5 —Å–∫–ª–∞–¥–æ–≤: –°–®–ê, –ì–µ—Ä–º–∞–Ω–∏—è, –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è, –ö–∏—Ç–∞–π, –ò—Å–ø–∞–Ω–∏—è. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã: Flash (—ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π), Economy (–¥–ª—è —Ç—è–∂–µ–ª—ã—Ö –ø–æ—Å—ã–ª–æ–∫), Air (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π), Smart (–¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤).'
          },
          {
            role: 'user',
            content: message
          }
        ],
        max_tokens: 500,
        temperature: 0.7
      }),
    });

    if (response.ok) {
      const data = await response.json();
      return data.choices[0]?.message?.content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.';
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Abacus AI:', error);
  }
  
  return '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.';
}
