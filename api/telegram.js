// api/telegram.js
// Telegram webhook ‚Üí Abacus.AI + –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏ Qwintry

const APPS_GET_CHAT_URL = 'https://apps.abacus.ai/api/getChatResponse';
const DEPLOYMENT_ID = '1413dbc596';

// –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
const userStates = {};

// –°–∫–ª–∞–¥—ã Qwintry
const WAREHOUSES = {
  '1': { code: 'US1', name: '–°–®–ê' },
  '2': { code: 'DE1', name: '–ì–µ—Ä–º–∞–Ω–∏—è' },
  '3': { code: 'UK1', name: '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è' },
  '4': { code: 'CN1', name: '–ö–∏—Ç–∞–π' },
  '5': { code: 'ES1', name: '–ò—Å–ø–∞–Ω–∏—è' }
};

export default async function handler(req, res) {
  try {
    if (req.method !== 'POST') {
      return res.status(200).send('OK: use POST from Telegram webhook');
    }

    const ABACUS_DEPLOYMENT_TOKEN = process.env.ABACUS_DEPLOYMENT_TOKEN;
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

    if (!ABACUS_DEPLOYMENT_TOKEN || !TELEGRAM_BOT_TOKEN) {
      console.error('Missing env vars', {
        hasAbacus: !!ABACUS_DEPLOYMENT_TOKEN,
        hasTg: !!TELEGRAM_BOT_TOKEN
      });
      return res.status(500).send('Server not configured');
    }

    const update = req.body || {};
    const msg = update.message || update.edited_message;
    if (!msg || (!msg.text && !msg.caption)) {
      console.log('No text in update:', JSON.stringify(update).slice(0, 500));
      return res.status(200).send('OK: no text');
    }

    const chatId = msg.chat.id;
    const userText = (msg.text || msg.caption || '').trim();

    // –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    if (userStates[chatId]?.step) {
      await handleCalcConversation(chatId, userText);
      return res.status(200).send('OK');
    }

    // –ö–æ–º–∞–Ω–¥–∞ /calc - –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—à–∞–≥–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç
    if (userText === '/calc') {
      userStates[chatId] = { step: 'warehouse' };
      await sendTg(chatId, `üì¶ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏

–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä):

1Ô∏è‚É£ –°–®–ê
2Ô∏è‚É£ –ì–µ—Ä–º–∞–Ω–∏—è  
3Ô∏è‚É£ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è
4Ô∏è‚É£ –ö–∏—Ç–∞–π
5Ô∏è‚É£ –ò—Å–ø–∞–Ω–∏—è

–ù–∞–ø—Ä–∏–º–µ—Ä: 1`);
      return res.status(200).send('OK');
    }

    // --- –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∏–¥—ë—Ç –≤ Abacus ---
    const url = `${APPS_GET_CHAT_URL}?deploymentToken=${encodeURIComponent(ABACUS_DEPLOYMENT_TOKEN)}&deploymentId=${encodeURIComponent(DEPLOYMENT_ID)}`;
    const body = {
      messages: [{ is_user: true, text: userText }],
      conversationId: String(chatId),
      userId: String(chatId)
    };

    console.log('Calling Abacus URL:', url);

    const resp = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body)
    });

    const raw = await resp.text();
    console.log('Abacus status:', resp.status, raw.slice(0, 400));

    let botReply = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.';
    if (resp.ok) {
      try {
        const data = JSON.parse(raw || '{}');

        // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π
        botReply =
          data?.responseText ||
          data?.text ||
          data?.response ||
          data?.message ||
          data?.choices?.[0]?.message?.content ||
          data?.result?.text ||
          botReply;

        // –î–æ–ø. —Å–ª—É—á–∞–π: —Ñ–æ—Ä–º–∞—Ç {"success": true, "result": {"messages": [{is_user: true, text: "..."}, {is_user: false, text: "..."}]}}
        if (!data?.responseText && data?.result?.messages?.length) {
          const lastAssistant = [...data.result.messages].reverse().find(m => m && m.is_user === false && typeof m.text === 'string');
          if (lastAssistant?.text) botReply = lastAssistant.text;
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞—â–∏—Ç–∞ –Ω–∞ —Å–ª—É—á–∞–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
        if (!botReply || typeof botReply !== 'string' || !botReply.trim()) {
          botReply = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.';
        }
      } catch (e) {
        console.error('JSON parse error:', e);
      }
    } else {
      console.error('Abacus non-OK', resp.status, raw.slice(0, 500));
    }

    await sendTg(chatId, botReply);
    return res.status(200).send('OK');
  } catch (e) {
    console.error('Webhook error:', e);
    return res.status(200).send('OK');
  }
}

// ----------------- helpers -----------------

// –ü–æ—à–∞–≥–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
async function handleCalcConversation(chatId, text) {
  const state = userStates[chatId] || {};

  if (state.step === 'warehouse') {
    const warehouseNum = text.trim();
    if (!WAREHOUSES[warehouseNum]) {
      await sendTg(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ 5:

1Ô∏è‚É£ –°–®–ê
2Ô∏è‚É£ –ì–µ—Ä–º–∞–Ω–∏—è  
3Ô∏è‚É£ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è
4Ô∏è‚É£ –ö–∏—Ç–∞–π
5Ô∏è‚É£ –ò—Å–ø–∞–Ω–∏—è

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:`);
      return;
    }
    
    state.warehouse = WAREHOUSES[warehouseNum];
    state.step = 'country';
    await sendTg(chatId, `‚úÖ –°–∫–ª–∞–¥: ${state.warehouse.name}

üåç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:

–ù–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –ë–µ–ª–∞—Ä—É—Å—å, –£–∫—Ä–∞–∏–Ω–∞, –ê–≤—Å—Ç—Ä–∞–ª–∏—è, –ì–µ—Ä–º–∞–Ω–∏—è –∏ —Ç.–¥.

–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:`);

  } else if (state.step === 'country') {
    const country = text.trim();
    if (country.length < 2) {
      await sendTg(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –ë–µ–ª–∞—Ä—É—Å—å)');
      return;
    }
    
    state.country = country;
    state.step = 'city';
    await sendTg(chatId, `‚úÖ –ú–∞—Ä—à—Ä—É—Ç: ${state.warehouse.name} ‚Üí ${country}

üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:

–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –ê–ª–º–∞—Ç—ã, –ú–∏–Ω—Å–∫, –ö–∏–µ–≤ –∏ —Ç.–¥.

–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:`);

  } else if (state.step === 'city') {
    const city = text.trim();
    if (city.length < 2) {
      await sendTg(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –ê–ª–º–∞—Ç—ã, –ú–∏–Ω—Å–∫)');
      return;
    }
    
    state.city = city;
    state.step = 'weight';
    await sendTg(chatId, `‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${state.warehouse.name} ‚Üí ${state.country}, ${city}

‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–æ—Å—ã–ª–∫–∏ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:

–ù–∞–ø—Ä–∏–º–µ—Ä: 2.5 –∏–ª–∏ 3 –∏–ª–∏ 0.5

–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å:`);

  } else if (state.step === 'weight') {
    const weight = parseFloat(text.replace(',', '.'));
    if (isNaN(weight) || weight <= 0 || weight > 50) {
      await sendTg(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –æ—Ç 0.1 –¥–æ 50 –∫–≥\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 2.5 –∏–ª–∏ 3');
      return;
    }
    
    state.weight = weight.toString();
    state.step = null; // —Å–±—Ä–æ—Å
    
    await sendTg(chatId, '‚è≥ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏...');
    await doCalc(chatId, state.warehouse.code, state.country, state.city, state.weight);
    delete userStates[chatId];
  }

  userStates[chatId] = state;
}

// –ó–∞–ø—Ä–æ—Å –≤ API –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ Qwintry
async function doCalc(chatId, hub, country, city, weight) {
  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ cityId —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤
  let cityId = null;
  
  try {
    // –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ –≤ API Qwintry
    const searchResp = await fetch("https://q3-api.qwintry.com/ru/frontend/calculator/cities", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        country: country,
        query: city
      })
    });
    
    if (searchResp.ok) {
      const cities = await searchResp.json();
      if (cities && cities.length > 0) {
        cityId = cities[0].id; // –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
        console.log(`Found city: ${city} with ID: ${cityId}`);
      }
    }
  } catch (e) {
    console.log('City search failed, using fallback');
  }

  // –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  if (!cityId) {
    cityId = 4050; // –ú–æ—Å–∫–≤–∞ –∫–∞–∫ fallback
  }

  const body = {
    hub: hub,
    weight: weight.toString(),
    weightMeasurement: "kg",
    dimensions: "1x1x1",
    dimensionsMeasurement: "cm",
    country: country,
    city: cityId,
    zip: "100000",
    itemsCost: "1",
    insurance: null,
    advancedMode: false,
    source: "calc"
  };

  try {
    console.log('Sending calc request:', JSON.stringify(body));
    
    const resp = await fetch("https://q3-api.qwintry.com/ru/frontend/calculator/calculate", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(body)
    });

    const data = await resp.json();
    console.log('Qwintry calc response:', JSON.stringify(data).slice(0, 1000));

    if (data?.costs && Object.keys(data.costs).length > 0) {
      let reply = `üì¶ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏\n`;
      reply += `üìç –ú–∞—Ä—à—Ä—É—Ç: ${hub} ‚Üí ${country}, ${city}\n`;
      reply += `‚öñÔ∏è –í–µ—Å: ${weight} –∫–≥\n\n`;

      const methods = Object.entries(data.costs);
      methods.forEach(([method, details], index) => {
        const label = details?.cost?.label || method;
        const price = details?.cost?.costWithDiscount || details?.cost?.shippingCost || 0;
        const total = details?.cost?.totalCostWithDiscount || details?.cost?.totalCost || 0;
        const days = details?.days || '?';

        reply += `${index + 1}. ${label}\n`;
        reply += `üí∞ –î–æ—Å—Ç–∞–≤–∫–∞: $${price}\n`;
        reply += `üí≥ –ò—Ç–æ–≥–æ: $${total}\n`;
        reply += `‚è∞ –°—Ä–æ–∫: ${days}\n\n`;
      });

      reply += `‚ÑπÔ∏è –¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê\n`;
      reply += `üì± –î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /calc`;

      await sendTg(chatId, reply.trim());
    } else {
      await sendTg(chatId, 
        `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ ${hub} ‚Üí ${country}, ${city}

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –î–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
‚Ä¢ –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ Qwintry
‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã –ø–æ –≤–µ—Å—É

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –î—Ä—É–≥–æ–π —Å–∫–ª–∞–¥ –∏–ª–∏ –≥–æ—Ä–æ–¥
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ: https://qwintry.com/ru/calculator/ru
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É Qwintry`
      );
    }
  } catch (err) {
    console.error('Calc error', err);
    await sendTg(chatId, 
      `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º:
https://qwintry.com/ru/calculator/ru`
    );
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
async function sendTg(chatId, text) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  const resp = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id: chatId, text })
  });
  const raw = await resp.text();
  if (!resp.ok) {
    console.error('Telegram sendMessage error', resp.status, raw.slice(0, 300));
  }
  return raw;
}
