import axios from "axios";

const TOKEN = process.env.BOT_TOKEN;
const API = `https://api.telegram.org/bot${TOKEN}`;

export default async function handler(req, res) {
  console.log(">>> BOT ONLINE ‚úÖ Update received:", JSON.stringify(req.body, null, 2));
  
  if (req.method === "POST") {
    const body = req.body;
    
    if (body.message) {
      await handleMessage(body.message);
    } else if (body.callback_query) {
      await handleCallback(body.callback_query);
    }
    return res.status(200).end("ok");
  }
  res.status(200).send("Bot running");
}

// === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async function sendMessage(chatId, text, replyMarkup = null) {
  try {
    const payload = {
      chat_id: chatId,
      text,
      parse_mode: "Markdown",
    };
    
    if (replyMarkup) {
      payload.reply_markup = replyMarkup;
    }
    
    const response = await axios.post(`${API}/sendMessage`, payload);
    return response.data;
  } catch (error) {
    console.error("Error sending message:", error.response?.data || error.message);
    throw error;
  }
}

// === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
async function sendMainMenu(chatId) {
  const text = `üìã *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /calc - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏
‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞`;

  const inlineButtons = {
    inline_keyboard: [
      [
        { text: "üì¶ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data: "menu_calc" },
        { text: "‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data: "menu_help" }
      ]
    ]
  };

  await sendMessage(chatId, text, inlineButtons);
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async function handleMessage(msg) {
  const chatId = msg.chat.id;
  const text = (msg.text || "").trim();
  const userId = msg.from.id;
  const username = msg.from.username || msg.from.first_name || "Unknown";

  console.log(`Message from ${username} (${userId}): ${text}`);

  try {
    // –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã, –ø–æ—Ç–æ–º —É–∂–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    if (text === "/start") {
      // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
      delete sessions[chatId];
      await sendMessage(
        chatId,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ Banderolka/Qwintry üì¶\n\n" +
          "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –¥–æ—Å—Ç–∞–≤–∫–µ, –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ:\n\n" +
          "–ö–æ–º–∞–Ω–¥—ã:\n" +
          "/calc - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏\n" +
          "/help - –°–ø—Ä–∞–≤–∫–∞\n" +
          "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"
      );
      await sendMainMenu(chatId);
      return;
    }
    
    if (text === "/menu") {
      delete sessions[chatId];
      await sendMainMenu(chatId);
      return;
    }
    
    if (text === "/help" || text === "‚ÑπÔ∏è –ü–æ–º–æ—â—å") {
      delete sessions[chatId];
      await sendHelpMessage(chatId);
      return;
    }
    
    if (text === "/calc" || text === "üì¶ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä") {
      await startCalc(chatId);
      return;
    }

    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–ï –∫–æ–º–∞–Ω–¥–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –≤–≤–æ–¥ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    if (!text.startsWith("/")) {
      await processUserInput(chatId, text);
    }
    
  } catch (error) {
    console.error("Error handling message:", error);
    await sendMessage(chatId, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ ===
async function handleCallback(query) {
  const chatId = query.message.chat.id;
  const data = query.data;
  const userId = query.from.id;
  const username = query.from.username || query.from.first_name || "Unknown";

  console.log(`Callback from ${username} (${userId}): ${data}`);

  try {
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
    await axios.post(`${API}/answerCallbackQuery`, {
      callback_query_id: query.id,
    });

    if (data === "menu_calc") {
      await startCalc(chatId);
    } else if (data === "menu_help") {
      await sendHelpMessage(chatId);
    }
  } catch (error) {
    console.error("Error handling callback:", error);
    await sendMessage(chatId, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

// === –°–ø—Ä–∞–≤–∫–∞ ===
async function sendHelpMessage(chatId) {
  const helpText = `‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É Banderolka/Qwintry*

üöÄ *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–æ–∫–∞—Ö –¥–æ—Å—Ç–∞–≤–∫–∏
‚Ä¢ –¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

üì¶ *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã:*
‚Ä¢ –°–®–ê (US1) - –î–µ–ª–∞–≤—ç—Ä
‚Ä¢ –ì–µ—Ä–º–∞–Ω–∏—è (DE1) - –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç
‚Ä¢ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è (UK1) - –õ–æ–Ω–¥–æ–Ω

üåç *–°—Ç—Ä–∞–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏:*
‚Ä¢ –†–æ—Å—Å–∏—è (RU)
‚Ä¢ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω (KZ)
‚Ä¢ –ë–µ–ª–∞—Ä—É—Å—å (BY)
‚Ä¢ –£–∫—Ä–∞–∏–Ω–∞ (UA)

üí° *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1. –ù–∞–∂–º–∏—Ç–µ "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /calc
2. –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (1-3)
3. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (1-4)
4. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–æ—Å—ã–ª–∫–∏ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö
5. –ü–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏

üîó *–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:*
‚Ä¢ –°–∞–π—Ç: https://qwintry.com
‚Ä¢ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: https://qwintry.com/login
‚Ä¢ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã: https://qwintry.com/ru/forbidden-goods

‚ùì *–í–æ–ø—Ä–æ—Å—ã?* –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —á–µ—Ä–µ–∑ —Å–∞–π—Ç.`;

  await sendMessage(chatId, helpText);
}

// === –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ===
const sessions = {};

async function startCalc(chatId) {
  sessions[chatId] = { step: "from" };
  
  const text = `üì¶ *–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏*

–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
1Ô∏è‚É£ –°–®–ê (US1)
2Ô∏è‚É£ –ì–µ—Ä–º–∞–Ω–∏—è (DE1)  
3Ô∏è‚É£ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è (UK1)

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1, 2 –∏–ª–∏ 3):`;

  await sendMessage(chatId, text);
}

async function processUserInput(chatId, text) {
  const session = sessions[chatId];
  if (!session) {
    // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    await sendMessage(chatId, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
    await sendMainMenu(chatId);
    return;
  }

  if (session.step === "from") {
    if (text === "1") session.from = "US1";
    else if (text === "2") session.from = "DE1";
    else if (text === "3") session.from = "UK1";
    else {
      return sendMessage(chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3");
    }

    session.step = "to";
    return sendMessage(
      chatId,
      `‚úÖ –°–∫–ª–∞–¥: ${session.from}

üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:
1Ô∏è‚É£ –†–æ—Å—Å–∏—è (RU)
2Ô∏è‚É£ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω (KZ)
3Ô∏è‚É£ –ë–µ–ª–∞—Ä—É—Å—å (BY)
4Ô∏è‚É£ –£–∫—Ä–∞–∏–Ω–∞ (UA)

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1, 2, 3 –∏–ª–∏ 4):`
    );
  }

  if (session.step === "to") {
    if (text === "1") session.to = "RU";
    else if (text === "2") session.to = "KZ";
    else if (text === "3") session.to = "BY";
    else if (text === "4") session.to = "UA";
    else {
      return sendMessage(chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ 1, 2, 3 –∏–ª–∏ 4");
    }

    session.step = "weight";
    return sendMessage(
      chatId,
      `‚úÖ –ú–∞—Ä—à—Ä—É—Ç: ${session.from} ‚Üí ${session.to}

‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–æ—Å—ã–ª–∫–∏ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:

–ù–∞–ø—Ä–∏–º–µ—Ä: 2.5 –∏–ª–∏ 3`
    );
  }

  if (session.step === "weight") {
    const weight = parseFloat(text.replace(",", "."));
    if (isNaN(weight) || weight <= 0) {
      return sendMessage(chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5)");
    }
    
    if (weight > 30) {
      return sendMessage(chatId, "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞: 30 –∫–≥");
    }

    session.weight = weight;
    session.step = "done";

    await sendMessage(chatId, "‚è≥ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏...");

    try {
      await doCalc(chatId, session.from, session.to, weight);
    } catch (error) {
      console.error("Calculation error:", error);
      await sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.");
    }
    
    delete sessions[chatId];
  }
}

// === –ó–∞–ø—Ä–æ—Å –∫ Qwintry API ===
async function doCalc(chatId, from, to, weight) {
  try {
    console.log(`Calculating: ${from} ‚Üí ${to}, weight: ${weight}kg`);
    
    const requestData = {
      hub: from,
      country: to,
      weight: weight.toString(),
      dimensions: "1x1x1",
      dimensionsMeasurement: "cm",
      weightMeasurement: "kg",
      itemsCost: "1",
      city: to === "RU" ? "4050" : null,
      zip: to === "RU" ? "100000" : null,
    };

    console.log("API Request:", JSON.stringify(requestData, null, 2));

    const response = await axios.post("https://qwintry.com/api/calculator-cost", requestData, {
      headers: {
        "Content-Type": "application/json",
        "User-Agent": "TelegramBot/1.0",
      },
      timeout: 15000,
    });

    console.log("API Response received successfully");

    if (!response.data || !response.data.costs) {
      throw new Error("Invalid API response structure");
    }

    await formatAndSendResults(chatId, response.data, from, to, weight);

  } catch (error) {
    console.error("Calculation error:", error.response?.data || error.message);
    
    if (error.code === "ECONNABORTED") {
      await sendMessage(chatId, "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    } else if (error.response?.status === 429) {
      await sendMessage(chatId, "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    } else if (error.response?.status >= 500) {
      await sendMessage(chatId, "‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    } else {
      await sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  }
}

// === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===
async function formatAndSendResults(chatId, data, from, to, weight) {
  try {
    let message = `üì¶ *–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏*\n`;
    message += `üìç –ú–∞—Ä—à—Ä—É—Ç: ${from} ‚Üí ${to}\n`;
    message += `‚öñÔ∏è –í–µ—Å: ${weight} –∫–≥\n\n`;

    const costs = data.costs || {};
    let methodCount = 1;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏
    for (const [methodKey, methodData] of Object.entries(costs)) {
      if (!methodData || !methodData.cost) continue;

      const cost = methodData.cost;
      const label = cost.label || methodKey;
      const shippingCost = cost.shippingCost || cost.costWithDiscount || 0;
      const totalCost = cost.totalCost || cost.totalCostWithDiscount || 0;
      const days = methodData.days || "–£—Ç–æ—á–Ω—è–µ—Ç—Å—è";
      
      // –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç HTML —Ç–µ–≥–æ–≤
      let description = methodData.description || "";
      description = description.replace(/<[^>]*>/g, "").replace(/\s+/g, " ").trim();
      if (description.length > 80) {
        description = description.substring(0, 80) + "...";
      }

      message += `${methodCount}. *${label}*\n`;
      message += `üí∞ –î–æ—Å—Ç–∞–≤–∫–∞: $${shippingCost}\n`;
      message += `üí≥ –ò—Ç–æ–≥–æ: $${totalCost.toFixed(2)}\n`;
      message += `‚è∞ –°—Ä–æ–∫: ${days}\n`;
      if (description) {
        message += `‚ÑπÔ∏è ${description}\n`;
      }
      message += `\n`;
      
      methodCount++;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–º–æ–∂–Ω–µ
    if (data.country_info && data.country_info.customs_limit) {
      message += `---\n`;
      message += `‚ÑπÔ∏è *–¢–∞–º–æ–∂–Ω—è:* ${data.country_info.customs_limit}\n`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–µ–Ω–∏–∏
    if (data.hubData && data.hubData.storage) {
      const storage = data.hubData.storage;
      message += `üì¶ *–°–∫–ª–∞–¥ ${data.hubData.hub}:* –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ ${storage.freeStorageDays} –¥–Ω–µ–π`;
      if (storage.subscriberFreeStorageDays && storage.subscriberFreeStorageDays > storage.freeStorageDays) {
        message += ` (–¥–æ ${storage.subscriberFreeStorageDays} –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)`;
      }
      message += `\n`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–Ω–∫—Ç–æ–≤ –≤—ã–¥–∞—á–∏
    if (data.pickup_points) {
      message += `üìç –î–æ—Å—Ç—É–ø–Ω–æ –ø—É–Ω–∫—Ç–æ–≤ –≤—ã–¥–∞—á–∏: ${data.pickup_points}`;
    }

    await sendMessage(chatId, message);

    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç
    const newCalcButton = {
      inline_keyboard: [
        [{ text: "üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç", callback_data: "menu_calc" }]
      ]
    };

    await sendMessage(chatId, "–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω —Ä–∞—Å—á—ë—Ç?", newCalcButton);

  } catch (error) {
    console.error("Error formatting results:", error);
    await sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.");
  }
}
