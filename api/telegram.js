import axios from "axios";

const TOKEN = process.env.BOT_TOKEN;
const API = `https://api.telegram.org/bot${TOKEN}`;

export default async function handler(req, res) {
  if (req.method === "POST") {
    const body = req.body;
    if (body.message) {
      await handleMessage(body.message);
    } else if (body.callback_query) {
      await handleCallback(body.callback_query);
    }
    return res.status(200).end("ok");
  }
  res.status(200).send("Bot running");
}

async function sendMessage(chatId, text, replyMarkup = null) {
  await axios.post(`${API}/sendMessage`, {
    chat_id: chatId,
    text,
    parse_mode: "Markdown",
    reply_markup: replyMarkup,
  });
}

// === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
async function sendMainMenu(chatId) {
  const text = `üìã *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  const keyboard = {
    inline_keyboard: [
      [
        { text: "üì¶ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data: "menu_calc" },
        { text: "‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data: "menu_help" },
      ],
    ],
  };
  await sendMessage(chatId, text, keyboard);
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async function handleMessage(msg) {
  const chatId = msg.chat.id;
  const text = (msg.text || "").trim();

  if (text === "/start") {
    await sendMessage(
      chatId,
      "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ Banderolka/Qwintry üì¶\n\n" +
        "–ö–æ–º–∞–Ω–¥—ã:\n/menu ‚Äì –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n/calc ‚Äì –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n/help ‚Äì –°–ø—Ä–∞–≤–∫–∞"
    );
    await sendMainMenu(chatId);
  } else if (text === "/menu") {
    await sendMainMenu(chatId);
  } else if (text === "/help") {
    await sendMessage(
      chatId,
      "‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞*\n\n" +
        "–Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É üì¶\n\n" +
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º –≤ –º–µ–Ω—é."
    );
  } else if (text === "/calc") {
    await startCalc(chatId);
  } else {
    // –û—Ç–≤–µ—Ç –Ω–∞ —Ü–∏—Ñ—Ä—ã –≤—ã–±–æ—Ä–∞
    await processUserInput(chatId, text);
  }
}

// === –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ ===
async function handleCallback(query) {
  const chatId = query.message.chat.id;
  const data = query.data;

  if (data === "menu_calc") {
    await startCalc(chatId);
  } else if (data === "menu_help") {
    await sendMessage(
      chatId,
      "‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞*\n\n" +
        "–Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É üì¶\n\n" +
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º –≤ –º–µ–Ω—é."
    );
  }
}

// === –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ===
const sessions = {};

async function startCalc(chatId) {
  sessions[chatId] = { step: "from" };
  const text = `üì¶ *–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏*

–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
1Ô∏è‚É£ –°–®–ê (US1)
2Ô∏è‚É£ –ì–µ—Ä–º–∞–Ω–∏—è (DE1)
3Ô∏è‚É£ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è (UK1)`;

  await sendMessage(chatId, text);
}

async function processUserInput(chatId, text) {
  const session = sessions[chatId];
  if (!session) return;

  if (session.step === "from") {
    if (text === "1") session.from = "US1";
    else if (text === "2") session.from = "DE1";
    else if (text === "3") session.from = "UK1";
    else return sendMessage(chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3");

    session.step = "to";
    return sendMessage(
      chatId,
      `‚úÖ –°–∫–ª–∞–¥: ${session.from}\n\nüåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:\n1Ô∏è‚É£ –†–æ—Å—Å–∏—è (RU)\n2Ô∏è‚É£ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω (KZ)\n3Ô∏è‚É£ –ë–µ–ª–∞—Ä—É—Å—å (BY)\n4Ô∏è‚É£ –£–∫—Ä–∞–∏–Ω–∞ (UA)`
    );
  }

  if (session.step === "to") {
    if (text === "1") session.to = "RU";
    else if (text === "2") session.to = "KZ";
    else if (text === "3") session.to = "BY";
    else if (text === "4") session.to = "UA";
    else return sendMessage(chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ 1, 2, 3 –∏–ª–∏ 4");

    session.step = "weight";
    return sendMessage(
      chatId,
      `‚úÖ –ú–∞—Ä—à—Ä—É—Ç: ${session.from} ‚Üí ${session.to}\n\n‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–æ—Å—ã–ª–∫–∏ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5)`
    );
  }

  if (session.step === "weight") {
    const weight = parseFloat(text);
    if (isNaN(weight) || weight <= 0) {
      return sendMessage(chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ ‚Äì –≤–µ—Å –ø–æ—Å—ã–ª–∫–∏ –≤ –∫–≥");
    }
    session.weight = weight;
    session.step = "done";

    await sendMessage(chatId, "‚è≥ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏...");

    await doCalc(chatId, session.from, session.to, weight);
    delete sessions[chatId];
  }
}

// === –ó–∞–ø—Ä–æ—Å –∫ Qwintry API ===
async function doCalc(chatId, from, to, weight) {
  try {
    const resp = await axios.post("https://qwintry.com/api/calculator-cost", {
      hub: from,
      country: to,
      weight: weight,
      dimensions: "1x1x1",
    });

    let msg = `üì¶ *–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏*\n–ú–∞—Ä—à—Ä—É—Ç: ${from} ‚Üí ${to}\n–í–µ—Å: ${weight} –∫–≥\n\n`;

    for (const [method, info] of Object.entries(resp.data.costs)) {
      const c = info.cost;
      msg += `*${c.label}*\n` +
             `üí∞ –î–æ—Å—Ç–∞–≤–∫–∞: $${c.shippingCost}\n` +
             `üí≥ –ò—Ç–æ–≥–æ: $${c.totalCost.toFixed(2)}\n` +
             `‚è∞ –°—Ä–æ–∫: ${info.days}\n` +
             `‚ÑπÔ∏è ${info.description.replace(/<[^>]+>/g, '')}\n\n`;
    }

    msg += `---\n‚ÑπÔ∏è –¢–∞–º–æ–∂–Ω—è: ${resp.data.country_info.customs_limit}\n`;
    msg += `üì¶ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${resp.data.hubData.storage.freeStorageDays} –¥–Ω–µ–π`;

    await sendMessage(chatId, msg);
  } catch (e) {
    console.error("Calc error:", e.response?.data || e.message);
    await sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}
