// api/telegram.js
// Telegram webhook ‚Üí Abacus.AI + –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏ Qwintry

const APPS_GET_CHAT_URL = 'https://apps.abacus.ai/api/getChatResponse';
const DEPLOYMENT_ID = '1413dbc596';

// –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
const userStates = {};

export default async function handler(req, res) {
  try {
    if (req.method !== 'POST') {
      return res.status(200).send('OK: use POST from Telegram webhook');
    }

    const ABACUS_DEPLOYMENT_TOKEN = process.env.ABACUS_DEPLOYMENT_TOKEN;
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

    if (!ABACUS_DEPLOYMENT_TOKEN || !TELEGRAM_BOT_TOKEN) {
      console.error('Missing env vars', {
        hasAbacus: !!ABACUS_DEPLOYMENT_TOKEN,
        hasTg: !!TELEGRAM_BOT_TOKEN
      });
      return res.status(500).send('Server not configured');
    }

    const update = req.body || {};
    const msg = update.message || update.edited_message;
    if (!msg || (!msg.text && !msg.caption)) {
      console.log('No text in update:', JSON.stringify(update).slice(0, 500));
      return res.status(200).send('OK: no text');
    }

    const chatId = msg.chat.id;
    const userText = (msg.text || msg.caption || '').trim();

    console.log(`User ${chatId} wrote: "${userText}"`);

    // –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    if (userStates[chatId]?.step) {
      console.log(`User ${chatId} in calc state: ${userStates[chatId].step}`);
      await handleCalcConversation(chatId, userText);
      return res.status(200).send('OK');
    }

    // –ö–æ–º–∞–Ω–¥–∞ /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ + inline –º–µ–Ω—é –¥–ª—è –≤–µ–±–∞
    if (userText === '/start') {
      const welcomeText = `–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏ Banderolka/Qwintry üì¶

–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –¥–æ—Å—Ç–∞–≤–∫–µ, –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ:

*–ö–æ–º–∞–Ω–¥—ã:*
/calc - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏
/help - –°–ø—Ä–∞–≤–∫–∞
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é`;
      
      await sendTgWithBothKeyboards(chatId, welcomeText);
      return res.status(200).send('OK');
    }

    // –ö–Ω–æ–ø–∫–∞ "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" - –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—à–∞–≥–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç
    if (userText === '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä' || userText === 'üì¶ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä' || userText === '/calc') {
      console.log(`Starting calc for user ${chatId}`);
      userStates[chatId] = { step: 'hub' };
      
      await sendTgWithRemoveKeyboard(chatId, `üì¶ *–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏*

–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–∫–ª–∞–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
‚Ä¢ *DE1* - –ì–µ—Ä–º–∞–Ω–∏—è
‚Ä¢ *US1* - –°–®–ê  
‚Ä¢ *UK1* - –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è

–ù–∞–ø—Ä–∏–º–µ—Ä: DE1`);
      return res.status(200).send('OK');
    }

    // –ö–Ω–æ–ø–∫–∞ "–ü–æ–º–æ—â—å"
    if (userText === '–ü–æ–º–æ—â—å' || userText === '‚ÑπÔ∏è –ü–æ–º–æ—â—å' || userText === '/help') {
      const helpText = `‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*

–Ø –ø–æ–º–æ–≥—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ Banderolka/Qwintry:

‚Ä¢ –¢–∞—Ä–∏—Ñ—ã –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
‚Ä¢ –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—ã–ª–æ–∫
‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç—ã –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/calc - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏
/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.`;
      
      await sendTgWithBothKeyboards(chatId, helpText);
      return res.status(200).send('OK');
    }

    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é
    if (userText === '/menu' || userText.toLowerCase() === '–º–µ–Ω—é') {
      await sendTgWithBothKeyboards(chatId, 'üìã *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:');
      return res.status(200).send('OK');
    }

    // --- –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∏–¥—ë—Ç –≤ Abacus ---
    console.log(`Sending to Abacus: "${userText}"`);
    
    const url = `${APPS_GET_CHAT_URL}?deploymentToken=${encodeURIComponent(ABACUS_DEPLOYMENT_TOKEN)}&deploymentId=${encodeURIComponent(DEPLOYMENT_ID)}`;
    const body = {
      messages: [{ is_user: true, text: userText }],
      conversationId: String(chatId),
      userId: String(chatId)
    };

    const resp = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body)
    });

    const raw = await resp.text();
    console.log('Abacus response status:', resp.status);

    let botReply = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.';
    if (resp.ok) {
      try {
        const data = JSON.parse(raw || '{}');

        // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π
        botReply =
          data?.responseText ||
          data?.text ||
          data?.response ||
          data?.message ||
          data?.choices?.[0]?.message?.content ||
          data?.result?.text ||
          botReply;

        // –î–æ–ø. —Å–ª—É—á–∞–π: —Ñ–æ—Ä–º–∞—Ç {"success": true, "result": {"messages": [{is_user: true, text: "..."}, {is_user: false, text: "..."}]}}
        if (!data?.responseText && data?.result?.messages?.length) {
          const lastAssistant = [...data.result.messages].reverse().find(m => m && m.is_user === false && typeof m.text === 'string');
          if (lastAssistant?.text) botReply = lastAssistant.text;
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞—â–∏—Ç–∞ –Ω–∞ —Å–ª—É—á–∞–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
        if (!botReply || typeof botReply !== 'string' || !botReply.trim()) {
          botReply = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.';
        }
      } catch (e) {
        console.error('JSON parse error:', e);
      }
    } else {
      console.error('Abacus non-OK', resp.status, raw.slice(0, 500));
    }

    await sendTgWithKeyboard(chatId, botReply, getMainKeyboard());
    return res.status(200).send('OK');
  } catch (e) {
    console.error('Webhook error:', e);
    return res.status(200).send('OK');
  }
}

// ----------------- helpers -----------------

// –ü–æ—à–∞–≥–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
async function handleCalcConversation(chatId, text) {
  const state = userStates[chatId] || {};

  if (state.step === 'hub') {
    const hub = text.toUpperCase().trim();
    if (!['DE1', 'US1', 'UK1'].includes(hub)) {
      await sendTg(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —Å–∫–ª–∞–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
‚Ä¢ *DE1* - –ì–µ—Ä–º–∞–Ω–∏—è
‚Ä¢ *US1* - –°–®–ê
‚Ä¢ *UK1* - –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:`);
      return;
    }
    state.hub = hub;
    state.step = 'country';
    await sendTg(chatId, `‚úÖ –°–∫–ª–∞–¥: *${hub}*

üåç –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:
‚Ä¢ *RU* - –†–æ—Å—Å–∏—è
‚Ä¢ *KZ* - –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω  
‚Ä¢ *BY* - –ë–µ–ª–∞—Ä—É—Å—å
‚Ä¢ *UA* - –£–∫—Ä–∞–∏–Ω–∞

–ù–∞–ø—Ä–∏–º–µ—Ä: RU`);
  } else if (state.step === 'country') {
    const country = text.toUpperCase().trim();
    if (country.length !== 2) {
      await sendTg(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: RU, KZ, BY, UA)');
      return;
    }
    state.country = country;
    state.step = 'weight';
    await sendTg(chatId, `‚úÖ –ú–∞—Ä—à—Ä—É—Ç: *${state.hub} ‚Üí ${country}*

‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–æ—Å—ã–ª–∫–∏ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:

–ù–∞–ø—Ä–∏–º–µ—Ä: *2.5* –∏–ª–∏ *3*`);
  } else if (state.step === 'weight') {
    const weight = parseFloat(text.replace(',', '.'));
    if (isNaN(weight) || weight <= 0 || weight > 50) {
      await sendTg(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –æ—Ç 0.1 –¥–æ 50 –∫–≥\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: *2.5* –∏–ª–∏ *3*');
      return;
    }
    state.weight = weight.toString();
    state.step = null; // —Å–±—Ä–æ—Å
    
    await sendTg(chatId, '‚è≥ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏...');
    await doCalc(chatId, state.hub, state.country, state.weight);
    delete userStates[chatId];
  }

  userStates[chatId] = state;
}

// –ó–∞–ø—Ä–æ—Å –≤ API –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ Qwintry —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function doCalc(chatId, hub, country, weight) {
  const body = {
    hub: hub,
    weight: weight.toString(),
    weightMeasurement: "kg",
    dimensions: "1x1x1",
    dimensionsMeasurement: "cm",
    country: country,
    city: 4050,
    zip: "100000",
    itemsCost: "1",
    insurance: null,
    advancedMode: false,
    source: "calc"
  };

  console.log('Qwintry request body:', JSON.stringify(body));

  try {
    const resp = await fetch("https://q3-api.qwintry.com/ru/frontend/calculator/calculate", {
      method: "POST",
      headers: { 
        "Content-Type": "application/json",
        "User-Agent": "TelegramBot/1.0"
      },
      body: JSON.stringify(body)
    });

    console.log('Qwintry response status:', resp.status);
    
    if (!resp.ok) {
      console.error('Qwintry API error:', resp.status, resp.statusText);
      await sendTgWithKeyboard(chatId, 
        '‚ùå –°–µ—Ä–≤–∏—Å —Ä–∞—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
        getMainKeyboard()
      );
      return;
    }

    const data = await resp.json();
    console.log('Qwintry calc response:', JSON.stringify(data).slice(0, 2000));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
    let costs = null;
    if (data?.costs && Object.keys(data.costs).length > 0) {
      costs = data.costs;
    } else if (data?.result?.costs && Object.keys(data.result.costs).length > 0) {
      costs = data.result.costs;
    } else if (data?.data?.costs && Object.keys(data.data.costs).length > 0) {
      costs = data.data.costs;
    }

    if (costs) {
      let reply = `üì¶ *–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏*\n`;
      reply += `üìç –ú–∞—Ä—à—Ä—É—Ç: *${hub} ‚Üí ${country}*\n`;
      reply += `‚öñÔ∏è –í–µ—Å: *${weight} –∫–≥*\n\n`;

      const methods = Object.entries(costs);
      console.log('Found delivery methods:', methods.length);
      
      methods.forEach(([method, details], index) => {
        console.log(`Method ${index + 1}:`, JSON.stringify(details).slice(0, 300));
        
        const label = details?.cost?.label || details?.label || method;
        const price = details?.cost?.costWithDiscount || details?.cost?.shippingCost || details?.price || 0;
        const total = details?.cost?.totalCostWithDiscount || details?.cost?.totalCost || details?.total || price;
        const days = details?.days || details?.deliveryTime || '?';

        reply += `${index + 1}. *${label}*\n`;
        reply += `üí∞ –î–æ—Å—Ç–∞–≤–∫–∞: $${price}\n`;
        reply += `üí≥ –ò—Ç–æ–≥–æ: $${total}\n`;
        reply += `‚è∞ –°—Ä–æ–∫: ${days}\n\n`;
      });

      reply += `‚ÑπÔ∏è –¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê\n`;
      reply += `üì± –î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /calc`;

      await sendTgWithKeyboard(chatId, reply.trim(), getMainKeyboard());
    } else {
      console.log('No costs found in response. Full response:', JSON.stringify(data));
      await sendTgWithKeyboard(chatId, 
        `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

*–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*
‚Ä¢ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–∞—Ä—à—Ä—É—Ç *${hub} ‚Üí ${country}*
‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤–µ—Å–∞ (${weight} –∫–≥)
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`,
        getMainKeyboard()
      );
    }
  } catch (err) {
    console.error('Calc error:', err);
    await sendTgWithKeyboard(chatId, 
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
      getMainKeyboard()
    );
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
async function sendTg(chatId, text) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  
  try {
    const resp = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        chat_id: chatId, 
        text, 
        parse_mode: 'Markdown',
        disable_web_page_preview: true
      })
    });
    
    const result = await resp.text();
    if (!resp.ok) {
      console.error('Telegram sendMessage error', resp.status, result.slice(0, 300));
    }
    return result;
  } catch (error) {
    console.error('sendTg error:', error);
    return null;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async function sendTgWithRemoveKeyboard(chatId, text) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  
  try {
    const payload = {
      chat_id: chatId,
      text: text,
      parse_mode: 'Markdown',
      reply_markup: { remove_keyboard: true },
      disable_web_page_preview: true
    };
    
    const resp = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    
    return await resp.text();
  } catch (error) {
    console.error('sendTgWithRemoveKeyboard error:', error);
    return null;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
async function sendTgWithKeyboard(chatId, text, keyboard) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  
  try {
    const payload = {
      chat_id: chatId,
      text: text,
      parse_mode: 'Markdown',
      reply_markup: keyboard,
      disable_web_page_preview: true
    };
    
    console.log('Sending keyboard to chat', chatId, ':', JSON.stringify(keyboard));
    
    const resp = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'User-Agent': 'TelegramBot/1.0'
      },
      body: JSON.stringify(payload)
    });
    
    const result = await resp.text();
    if (!resp.ok) {
      console.error('Telegram sendMessage (keyboard) error', resp.status, result.slice(0, 300));
      // Fallback –±–µ–∑ Markdown
      const fallbackPayload = {
        chat_id: chatId,
        text: text.replace(/\*/g, ''),
        reply_markup: keyboard,
        disable_web_page_preview: true
      };
      
      const fallbackResp = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(fallbackPayload)
      });
      
      return await fallbackResp.text();
    } else {
      console.log('Keyboard sent successfully to chat', chatId);
    }
    return result;
  } catch (error) {
    console.error('sendTgWithKeyboard error:', error);
    return null;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å –æ–±–µ–∏–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏ (Reply + Inline –¥–ª—è –≤–µ–±–∞)
async function sendTgWithBothKeyboards(chatId, text) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
    await sendTgWithKeyboard(chatId, text, getMainKeyboard());
    
    // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Inline –∫–Ω–æ–ø–∫–∏ (–¥–ª—è –≤–µ–±–∞)
    const inlinePayload = {
      chat_id: chatId,
      text: "üîΩ *–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:*",
      parse_mode: 'Markdown',
      reply_markup: getInlineKeyboard(),
      disable_web_page_preview: true
    };
    
    const resp = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(inlinePayload)
    });
    
    return await resp.text();
  } catch (error) {
    console.error('sendTgWithBothKeyboards error:', error);
    return null;
  }
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ (Reply Keyboard –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
function getMainKeyboard() {
  return {
    keyboard: [
      [
        { text: "üì¶ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" },
        { text: "‚ÑπÔ∏è –ü–æ–º–æ—â—å" }
      ]
    ],
    resize_keyboard: true,
    one_time_keyboard: false,
    persistent: true
  };
}

// Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–¥–ª—è –≤–µ–±–∞)
function getInlineKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: "üì¶ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data: "calc" },
        { text: "‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data: "help" }
      ]
    ]
  };
}
