// api/telegram.js
// Telegram webhook ‚Üí Abacus.AI + –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏ Qwintry

const APPS_GET_CHAT_URL = 'https://apps.abacus.ai/api/getChatResponse';
const DEPLOYMENT_ID = '1413dbc596';

// –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
const userStates = {};

// –°–∫–ª–∞–¥—ã Qwintry
const WAREHOUSES = {
  '1': { code: 'US1', name: '–°–®–ê' },
  '2': { code: 'DE1', name: '–ì–µ—Ä–º–∞–Ω–∏—è' },
  '3': { code: 'UK1', name: '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è' },
  '4': { code: 'CN1', name: '–ö–∏—Ç–∞–π' },
  '5': { code: 'ES1', name: '–ò—Å–ø–∞–Ω–∏—è' }
};

// –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
const COUNTRY_ALIASES = {
  '—Ä–æ—Å—Å–∏—è': ['russia', 'ru', 'russian federation'],
  '–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω': ['kazakhstan', 'kz'],
  '–±–µ–ª–∞—Ä—É—Å—å': ['belarus', 'by', '–±–µ–ª–æ—Ä—É—Å—Å–∏—è'],
  '—É–∫—Ä–∞–∏–Ω–∞': ['ukraine', 'ua'],
  '–≥–µ—Ä–º–∞–Ω–∏—è': ['germany', 'de', 'deutschland'],
  '–∞–≤—Å—Ç—Ä–∞–ª–∏—è': ['australia', 'au'],
  '–∫–∏—Ç–∞–π': ['china', 'cn'],
  '–∏—Å–ø–∞–Ω–∏—è': ['spain', 'es'],
  '–≤–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è': ['united kingdom', 'uk', 'gb', 'britain'],
  '—Å—à–∞': ['united states', 'us', 'usa', 'america']
};

export default async function handler(req, res) {
  try {
    if (req.method !== 'POST') {
      return res.status(200).send('OK: use POST from Telegram webhook');
    }

    const ABACUS_DEPLOYMENT_TOKEN = process.env.ABACUS_DEPLOYMENT_TOKEN;
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

    if (!ABACUS_DEPLOYMENT_TOKEN || !TELEGRAM_BOT_TOKEN) {
      console.error('Missing env vars', {
        hasAbacus: !!ABACUS_DEPLOYMENT_TOKEN,
        hasTg: !!TELEGRAM_BOT_TOKEN
      });
      return res.status(500).send('Server not configured');
    }

    const update = req.body || {};
    const msg = update.message || update.edited_message;
    if (!msg || (!msg.text && !msg.caption)) {
      console.log('No text in update:', JSON.stringify(update).slice(0, 500));
      return res.status(200).send('OK: no text');
    }

    const chatId = msg.chat.id;
    const userText = (msg.text || msg.caption || '').trim();

    // –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    if (userStates[chatId]?.step) {
      await handleCalcConversation(chatId, userText);
      return res.status(200).send('OK');
    }

    // –ö–æ–º–∞–Ω–¥–∞ /calc - –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—à–∞–≥–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç
    if (userText === '/calc') {
      userStates[chatId] = { step: 'warehouse' };
      await sendTg(chatId, `üì¶ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏

–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä):

1Ô∏è‚É£ –°–®–ê
2Ô∏è‚É£ –ì–µ—Ä–º–∞–Ω–∏—è  
3Ô∏è‚É£ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è
4Ô∏è‚É£ –ö–∏—Ç–∞–π
5Ô∏è‚É£ –ò—Å–ø–∞–Ω–∏—è

–ù–∞–ø—Ä–∏–º–µ—Ä: 1`);
      return res.status(200).send('OK');
    }

    // --- –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∏–¥—ë—Ç –≤ Abacus ---
    const url = `${APPS_GET_CHAT_URL}?deploymentToken=${encodeURIComponent(ABACUS_DEPLOYMENT_TOKEN)}&deploymentId=${encodeURIComponent(DEPLOYMENT_ID)}`;
    const body = {
      messages: [{ is_user: true, text: userText }],
      conversationId: String(chatId),
      userId: String(chatId)
    };

    console.log('Calling Abacus URL:', url);

    const resp = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body)
    });

    const raw = await resp.text();
    console.log('Abacus status:', resp.status, raw.slice(0, 400));

    let botReply = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.';
    if (resp.ok) {
      try {
        const data = JSON.parse(raw || '{}');

        // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π
        botReply =
          data?.responseText ||
          data?.text ||
          data?.response ||
          data?.message ||
          data?.choices?.[0]?.message?.content ||
          data?.result?.text ||
          botReply;

        // –î–æ–ø. —Å–ª—É—á–∞–π: —Ñ–æ—Ä–º–∞—Ç {"success": true, "result": {"messages": [{is_user: true, text: "..."}, {is_user: false, text: "..."}]}}
        if (!data?.responseText && data?.result?.messages?.length) {
          const lastAssistant = [...data.result.messages].reverse().find(m => m && m.is_user === false && typeof m.text === 'string');
          if (lastAssistant?.text) botReply = lastAssistant.text;
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞—â–∏—Ç–∞ –Ω–∞ —Å–ª—É—á–∞–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
        if (!botReply || typeof botReply !== 'string' || !botReply.trim()) {
          botReply = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.';
        }
      } catch (e) {
        console.error('JSON parse error:', e);
      }
    } else {
      console.error('Abacus non-OK', resp.status, raw.slice(0, 500));
    }

    await sendTg(chatId, botReply);
    return res.status(200).send('OK');
  } catch (e) {
    console.error('Webhook error:', e);
    return res.status(200).send('OK');
  }
}

// ----------------- helpers -----------------

// –ü–æ—à–∞–≥–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
async function handleCalcConversation(chatId, text) {
  const state = userStates[chatId] || {};

  if (state.step === 'warehouse') {
    const warehouseNum = text.trim();
    if (!WAREHOUSES[warehouseNum]) {
      await sendTg(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–∫–ª–∞–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ 5:

1Ô∏è‚É£ –°–®–ê
2Ô∏è‚É£ –ì–µ—Ä–º–∞–Ω–∏—è  
3Ô∏è‚É£ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è
4Ô∏è‚É£ –ö–∏—Ç–∞–π
5Ô∏è‚É£ –ò—Å–ø–∞–Ω–∏—è

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:`);
      return;
    }
    
    state.warehouse = WAREHOUSES[warehouseNum];
    state.step = 'country';
    await sendTg(chatId, `‚úÖ –°–∫–ª–∞–¥: ${state.warehouse.name}

üåç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:

–ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å:
‚Ä¢ –ü–æ-—Ä—É—Å—Å–∫–∏: –†–æ—Å—Å–∏—è, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –ë–µ–ª–∞—Ä—É—Å—å
‚Ä¢ –ü–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏: Russia, Kazakhstan, Belarus  
‚Ä¢ –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã: RU, KZ, BY

–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:`);

  } else if (state.step === 'country') {
    const countryName = text.trim();
    if (countryName.length < 2) {
      await sendTg(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è, Russia, RU)');
      return;
    }
    
    await sendTg(chatId, 'üîç –ò—â—É —Å—Ç—Ä–∞–Ω—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω—ã —á–µ—Ä–µ–∑ API
    const countryData = await findCountry(countryName);
    if (!countryData) {
      await sendTg(chatId, `‚ùå –°—Ç—Ä–∞–Ω–∞ "${countryName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ Qwintry.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –†–æ—Å—Å–∏—è / Russia / RU
‚Ä¢ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω / Kazakhstan / KZ  
‚Ä¢ –ë–µ–ª–∞—Ä—É—Å—å / Belarus / BY
‚Ä¢ –£–∫—Ä–∞–∏–Ω–∞ / Ukraine / UA
‚Ä¢ –ì–µ—Ä–º–∞–Ω–∏—è / Germany / DE

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â—ë —Ä–∞–∑:`);
      return;
    }
    
    state.country = countryData;
    state.step = 'city';
    await sendTg(chatId, `‚úÖ –°—Ç—Ä–∞–Ω–∞: ${countryData.name}

üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:

–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –ê–ª–º–∞—Ç—ã, –ú–∏–Ω—Å–∫, –ö–∏–µ–≤, –ë–µ—Ä–ª–∏–Ω –∏ —Ç.–¥.

–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:`);

  } else if (state.step === 'city') {
    const cityName = text.trim();
    if (cityName.length < 2) {
      await sendTg(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –ê–ª–º–∞—Ç—ã, –ú–∏–Ω—Å–∫)');
      return;
    }
    
    await sendTg(chatId, 'üîç –ò—â—É –≥–æ—Ä–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ API
    const cityData = await findCity(state.country.id, cityName);
    if (!cityData) {
      await sendTg(chatId, `‚ùå –ì–æ—Ä–æ–¥ "${cityName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–∞–Ω–µ ${state.country.name}.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ –í—ã–±—Ä–∞—Ç—å –∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥ –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–µ

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –µ—â—ë —Ä–∞–∑:`);
      return;
    }
    
    state.city = cityData;
    state.step = 'weight';
    await sendTg(chatId, `‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${state.warehouse.name} ‚Üí ${state.country.name}, ${cityData.name}

‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–æ—Å—ã–ª–∫–∏ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:

–ù–∞–ø—Ä–∏–º–µ—Ä: 2.5 –∏–ª–∏ 3 –∏–ª–∏ 0.5

–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å:`);

  } else if (state.step === 'weight') {
    const weight = parseFloat(text.replace(',', '.'));
    if (isNaN(weight) || weight <= 0 || weight > 50) {
      await sendTg(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –æ—Ç 0.1 –¥–æ 50 –∫–≥\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 2.5 –∏–ª–∏ 3');
      return;
    }
    
    state.weight = weight.toString();
    state.step = null; // —Å–±—Ä–æ—Å
    
    await sendTg(chatId, '‚è≥ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏...');
    await doCalc(chatId, state.warehouse.code, state.country.id, state.city.id, state.weight, state.country.name, state.city.name);
    delete userStates[chatId];
  }

  userStates[chatId] = state;
}

// –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω—ã —á–µ—Ä–µ–∑ API Qwintry —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
async function findCountry(searchTerm) {
  try {
    const resp = await fetch("https://q3-api.qwintry.com/ru/frontend/calculator/countries", {
      method: "GET",
      headers: { "Content-Type": "application/json" }
    });
    
    if (!resp.ok) {
      console.error('Countries API failed:', resp.status);
      return null;
    }
    
    const countries = await resp.json();
    if (!Array.isArray(countries)) {
      console.error('Countries API returned non-array:', typeof countries);
      return null;
    }
    
    console.log(`Searching for country: "${searchTerm}" in ${countries.length} countries`);
    
    const searchLower = searchTerm.toLowerCase().trim();
    
    // –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º –ø–æ–ª—è–º
    const found = countries.find(country => {
      if (!country || typeof country !== 'object') return false;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
      const fields = [
        country.name,
        country.name_en,
        country.name_ru,
        country.title,
        country.title_en,
        country.title_ru,
        country.code,
        country.alpha2,
        country.iso,
        country.country_code
      ];
      
      return fields.some(field => {
        if (!field || typeof field !== 'string') return false;
        const fieldLower = field.toLowerCase();
        
        // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if (fieldLower === searchLower) return true;
        
        // –ü–æ–∏—Å–∫ –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é
        if (fieldLower.includes(searchLower) || searchLower.includes(fieldLower)) return true;
        
        return false;
      });
    });
    
    if (found) {
      const displayName = found.name || found.name_ru || found.name_en || found.title || searchTerm;
      console.log(`Found country: ${displayName} (ID: ${found.id})`);
      return { id: found.id, name: displayName };
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ API, –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –∞–ª–∏–∞—Å—ã
    for (const [ruName, aliases] of Object.entries(COUNTRY_ALIASES)) {
      if (ruName === searchLower || aliases.some(alias => alias === searchLower)) {
        // –ò—â–µ–º –≤ —Å–ø–∏—Å–∫–µ —Å—Ç—Ä–∞–Ω –ø–æ –∞–ª–∏–∞—Å–∞–º
        const foundByAlias = countries.find(country => {
          const fields = [
            country.name,
            country.name_en,
            country.name_ru,
            country.code,
            country.alpha2
          ];
          
          return fields.some(field => {
            if (!field) return false;
            const fieldLower = field.toLowerCase();
            return aliases.some(alias => fieldLower.includes(alias) || alias.includes(fieldLower));
          });
        });
        
        if (foundByAlias) {
          const displayName = foundByAlias.name || foundByAlias.name_ru || foundByAlias.name_en || ruName;
          console.log(`Found country by alias: ${displayName} (ID: ${foundByAlias.id})`);
          return { id: foundByAlias.id, name: displayName };
        }
      }
    }
    
    console.log(`Country not found: "${searchTerm}"`);
    return null;
    
  } catch (e) {
    console.error('Country search error:', e);
    return null;
  }
}

// –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ API Qwintry
async function findCity(countryId, cityName) {
  try {
    const resp = await fetch("https://q3-api.qwintry.com/ru/frontend/calculator/cities", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        country: countryId,
        query: cityName
      })
    });
    
    if (!resp.ok) {
      console.error('Cities API failed:', resp.status);
      return null;
    }
    
    const cities = await resp.json();
    if (!Array.isArray(cities) || cities.length === 0) {
      console.log(`No cities found for "${cityName}" in country ${countryId}`);
      return null;
    }
    
    // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
    const city = cities[0];
    console.log(`Found city: ${city.name} (ID: ${city.id}) in country ${countryId}`);
    return { id: city.id, name: city.name };
    
  } catch (e) {
    console.error('City search error:', e);
    return null;
  }
}

// –ó–∞–ø—Ä–æ—Å –≤ API –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ Qwintry
async function doCalc(chatId, hub, countryId, cityId, weight, countryName, cityName) {
  const body = {
    hub: hub,
    weight: weight.toString(),
    weightMeasurement: "kg",
    dimensions: "1x1x1",
    dimensionsMeasurement: "cm",
    country: countryId,
    city: cityId,
    zip: "100000",
    itemsCost: "1",
    insurance: null,
    advancedMode: false,
    source: "calc"
  };

  try {
    console.log('Sending calc request:', JSON.stringify(body));
    
    const resp = await fetch("https://q3-api.qwintry.com/ru/frontend/calculator/calculate", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(body)
    });

    const data = await resp.json();
    console.log('Qwintry calc response received, costs count:', Object.keys(data?.costs || {}).length);

    if (data?.costs && Object.keys(data.costs).length > 0) {
      let reply = `üì¶ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏\n`;
      reply += `üìç –ú–∞—Ä—à—Ä—É—Ç: ${hub} ‚Üí ${countryName}, ${cityName}\n`;
      reply += `‚öñÔ∏è –í–µ—Å: ${weight} –∫–≥\n\n`;

      const methods = Object.entries(data.costs);
      methods.forEach(([method, details], index) => {
        const label = details?.cost?.label || method;
        const price = details?.cost?.costWithDiscount || details?.cost?.shippingCost || 0;
        const total = details?.cost?.totalCostWithDiscount || details?.cost?.totalCost || 0;
        const days = details?.days || '?';

        reply += `${index + 1}. ${label}\n`;
        reply += `üí∞ –î–æ—Å—Ç–∞–≤–∫–∞: $${price}\n`;
        reply += `üí≥ –ò—Ç–æ–≥–æ: $${total}\n`;
        reply += `‚è∞ –°—Ä–æ–∫: ${days}\n\n`;
      });

      reply += `‚ÑπÔ∏è –¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê\n`;
      reply += `üì± –î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /calc`;

      await sendTg(chatId, reply.trim());
    } else {
      await sendTg(chatId, 
        `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ ${hub} ‚Üí ${countryName}, ${cityName}

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –î–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã –ø–æ –≤–µ—Å—É (–º–∞–∫—Å–∏–º—É–º 18.1 –∫–≥ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –º–µ—Ç–æ–¥–æ–≤)
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –î—Ä—É–≥–æ–π —Å–∫–ª–∞–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ì–µ—Ä–º–∞–Ω–∏—è –≤–º–µ—Å—Ç–æ –°–®–ê)
‚Ä¢ –ú–µ–Ω—å—à–∏–π –≤–µ—Å –ø–æ—Å—ã–ª–∫–∏
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ: https://qwintry.com/ru/calculator/ru`
      );
    }
  } catch (err) {
    console.error('Calc error', err);
    await sendTg(chatId, 
      `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º:
https://qwintry.com/ru/calculator/ru`
    );
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
async function sendTg(chatId, text) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  const resp = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id: chatId, text })
  });
  const raw = await resp.text();
  if (!resp.ok) {
    console.error('Telegram sendMessage error', resp.status, raw.slice(0, 300));
  }
  return raw;
}
