// Telegram Bot –¥–ª—è Qwintry - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
import fetch from "node-fetch";

// –¢–æ–∫–µ–Ω—ã
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const ABACUS_API_KEY = process.env.ABACUS_API_KEY;

// –ú–∞–ø–ø–∏–Ω–≥ —Å–∫–ª–∞–¥–æ–≤ –Ω–∞ hubCode
const HUB_CODES = {
  US: "US1",   
  DE: "EU1",   
  UK: "UK1",   
  CN: "CN1",   
  ES: "ES1"
};

// –ú–∞–ø–ø–∏–Ω–≥ countryId ‚Üí ISO
const COUNTRY_ISO = {
  71: "RU",
  84: "KZ",
  149: "BY",
  162: "UA",
};

// –≠–º–æ–¥–∑–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
const TARIFF_EMOJIS = {
  qwintry_flash: '‚ö°',
  ecopost: 'üåç',
  qwair: '‚úàÔ∏è',
  qwintry_smart: 'üöÄ',
  flash_optima: 'üî•',
  flash_ultra: 'üíé'
};

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –°–∫–ª–∞–¥—ã
const WAREHOUSES = {
  US: { name: '–°–®–ê', code: 'US1', flag: 'üá∫üá∏' },
  DE: { name: '–ì–µ—Ä–º–∞–Ω–∏—è', code: 'EU1', flag: 'üá©üá™' },
  UK: { name: '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', code: 'UK1', flag: 'üá¨üáß' },
  CN: { name: '–ö–∏—Ç–∞–π', code: 'CN1', flag: 'üá®üá≥' },
  ES: { name: '–ò—Å–ø–∞–Ω–∏—è', code: 'ES1', flag: 'üá™üá∏' }
};

// –°—Ç—Ä–∞–Ω—ã
const COUNTRIES = {
  71: { name: '–†–æ—Å—Å–∏—è', iso: 'RU' },
  84: { name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', iso: 'KZ' },
  149: { name: '–ë–µ–ª–∞—Ä—É—Å—å', iso: 'BY' },
  162: { name: '–£–∫—Ä–∞–∏–Ω–∞', iso: 'UA' }
};

// –ì–æ—Ä–æ–¥–∞
const CITIES = {
  71: { 4050: '–ú–æ—Å–∫–≤–∞', 4079: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', 4051: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', 4052: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', 4053: '–ö–∞–∑–∞–Ω—å' },
  84: { 5001: '–ê–ª–º–∞—Ç—ã', 5002: '–ù—É—Ä-–°—É–ª—Ç–∞–Ω', 5003: '–®—ã–º–∫–µ–Ω—Ç' }
};

// === HANDLER ===
export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });
  try {
    const update = req.body;
    console.log("üì® Update:", JSON.stringify(update, null, 2));

    if (update.message) {
      await handleUserInput(update.message);
    } else if (update.callback_query) {
      await handleCallbackQuery(update.callback_query);
    }
    res.status(200).json({ ok: true });
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", e);
    res.status(500).json({ error: "Internal server error" });
  }
}

// === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –í–í–û–î ===
async function handleUserInput(msg) {
  const chatId = msg.chat.id;
  const text = msg.text;
  const userId = msg.from.id;

  console.log(`üì® User ${userId}: ${text}`);

  if (text === "/start") return handleStart(chatId);

  const state = userStates.get(userId) || {};
  switch (state.state) {
    case "awaiting_country": return handleCountryInput(chatId, userId, text);
    case "awaiting_city": return handleCityInput(chatId, userId, text);
    case "awaiting_weight": return handleWeightInput(chatId, userId, text);
    case "awaiting_ai_question": return handleAIQuestion(chatId, userId, text);
    default: return handleStart(chatId);
  }
}

// === CALLBACK ===
async function handleCallbackQuery(cb) {
  const chatId = cb.message.chat.id;
  const userId = cb.from.id;
  const data = cb.data;

  await answerCallbackQuery(cb.id);

  if (data === "calculator") return showWarehouseSelection(chatId, userId);
  if (data === "discounts") return showDiscounts(chatId);
  if (data === "faq") return showFAQ(chatId);
  if (data === "ai_consultant") return startAIConsultant(chatId, userId);
  if (data === "back_to_menu") return showMainMenu(chatId);

  if (data.startsWith("warehouse_"))
    return handleWarehouseSelection(chatId, userId, data.replace("warehouse_", ""));
  if (data.startsWith("country_"))
    return handleCountrySelection(chatId, userId, parseInt(data.replace("country_", "")));
  if (data.startsWith("city_"))
    return handleCitySelection(chatId, userId, parseInt(data.replace("city_", "")));
}

// === START ===
async function handleStart(chatId) {
  const text = `üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Qwintry Bot!**

üì¶ –†–∞—Å—Å—á–∏—Ç–∞–π –¥–æ—Å—Ç–∞–≤–∫—É  
üí∞ –£–∑–Ω–∞–π –æ —Å–∫–∏–¥–∫–∞—Ö  
‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã  
ü§ñ –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å AI`;

  await showMainMenu(chatId, text);
}

async function showMainMenu(chatId, text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é") {
  const kb = {
    inline_keyboard: [
      [{ text: 'üì¶ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', callback_data: 'calculator' }],
      [{ text: 'üí∞ –°–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏', callback_data: 'discounts' }],
      [{ text: '‚ùì FAQ', callback_data: 'faq' }],
      [{ text: 'ü§ñ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç', callback_data: 'ai_consultant' }]
    ]
  };
  await sendMessage(chatId, text, kb);
}

// === –°–ö–õ–ê–î ===
async function showWarehouseSelection(chatId, userId) {
  userStates.set(userId, { state: "selecting_warehouse" });
  const kb = {
    inline_keyboard: [
      [
        { text: `${WAREHOUSES.US.flag} ${WAREHOUSES.US.name}`, callback_data: "warehouse_US" },
        { text: `${WAREHOUSES.DE.flag} ${WAREHOUSES.DE.name}`, callback_data: "warehouse_DE" }
      ],
      [
        { text: `${WAREHOUSES.UK.flag} ${WAREHOUSES.UK.name}`, callback_data: "warehouse_UK" },
        { text: `${WAREHOUSES.CN.flag} ${WAREHOUSES.CN.name}`, callback_data: "warehouse_CN" }
      ],
      [
        { text: `${WAREHOUSES.ES.flag} ${WAREHOUSES.ES.name}`, callback_data: "warehouse_ES" }
      ],
      [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_menu" }]
    ]
  };
  await sendMessage(chatId, "üì¶ **–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**", kb);
}

async function handleWarehouseSelection(chatId, userId, wCode) {
  const w = WAREHOUSES[wCode];
  if (!w) return sendMessage(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥");

  userStates.set(userId, {
    state: "selecting_country",
    warehouse: wCode,
    warehouseName: w.name,
    hubCode: w.code
  });
  await showCountrySelection(chatId, userId);
}

// === –°–¢–†–ê–ù–ê / –ì–û–†–û–î ===
async function showCountrySelection(chatId, userId) {
  const kb = {
    inline_keyboard: [
      [{ text: "üá∑üá∫ –†–æ—Å—Å–∏—è", callback_data: "country_71" }],
      [{ text: "üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", callback_data: "country_84" }],
      [{ text: "üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å", callback_data: "country_149" }],
      [{ text: "üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞", callback_data: "country_162" }],
      [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "calculator" }]
    ]
  };
  await sendMessage(chatId, "üåç **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:**", kb);
}

async function handleCountrySelection(chatId, userId, cId) {
  const c = COUNTRIES[cId];
  if (!c) return sendMessage(chatId, "‚ùå –°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

  const st = userStates.get(userId);
  st.state = "selecting_city";
  st.countryId = cId;
  st.countryName = c.name;
  userStates.set(userId, st);

  await showCitySelection(chatId, userId, cId);
}

async function showCitySelection(chatId, userId, cId) {
  const cityButtons = Object.entries(CITIES[cId] || {})
    .map(([id, name]) => [{ text: name, callback_data: `city_${id}` }]);
  if (cityButtons.length === 0) {
    const st = userStates.get(userId);
    st.state = "awaiting_city";
    userStates.set(userId, st);
    return sendMessage(chatId, "üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤—Ä—É—á–Ω—É—é:");
  }
  const kb = { inline_keyboard: [...cityButtons, [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "calculator" }]] };
  await sendMessage(chatId, "üèôÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:**", kb);
}

async function handleCitySelection(chatId, userId, cityId) {
  const st = userStates.get(userId);
  st.state = "awaiting_weight";
  st.cityId = cityId;
  st.cityName = CITIES[st.countryId]?.[cityId] || "–ì–æ—Ä–æ–¥";
  userStates.set(userId, st);
  await sendMessage(chatId, "‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–æ—Å—ã–ª–∫–∏ (–ø—Ä–∏–º–µ—Ä: 2.5):");
}

// === –í–ï–° ===
async function handleWeightInput(chatId, userId, weightText) {
  const weight = parseFloat(weightText.replace(",", "."));
  if (isNaN(weight) || weight <= 0 || weight > 50)
    return sendMessage(chatId, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (0.1-50 –∫–≥)");

  const st = userStates.get(userId);
  await sendMessage(chatId, "‚è≥ –°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å...");

  const res = await calculateDelivery(weight, st.countryId, st.cityId, st.warehouse);
  if (!res.success) return sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: " + res.error);

  const result = formatDeliveryResult(res.data, st.warehouseName, st.countryName, st.cityName, weight, st.warehouse);
  await sendMessage(chatId, result);

  userStates.delete(userId);
}

// === API ===
async function calculateDelivery(weight, countryId, cityId, warehouseCode) {
  try {
    const hubCode = HUB_CODES[warehouseCode];
    const countryIso = COUNTRY_ISO[countryId] || countryId.toString();
    const payload = {
      weight: weight.toString(),
      weightMeasurement: "kg",
      dimensions: "1x1x1",
      dimensionsMeasurement: "cm",
      hubCode,
      country: countryIso,
      city: cityId.toString(),
      zip: "100000",
      insurance: null,
      itemsCost: "1",
      itemsCostInUSD: 1
    };
    const r = await fetch("https://q3-api.qwintry.com/ru/frontend/calculator/calculate", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    });
    if (!r.ok) throw new Error(`HTTP ${r.status}`);
    const data = await r.json();
    return { success: true, data };
  } catch (e) {
    return { success: false, error: e.message };
  }
}

// === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ===
function formatDeliveryResult(data, warehouseName, countryName, cityName, weight, warehouseCode) {
  if (!data.costs) return "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏.";

  let costs = Object.entries(data.costs);
  if (["DE","UK","ES"].includes(warehouseCode)) costs = costs.filter(([k]) => k==="ecopost");

  let message = `üì¶ **–î–æ—Å—Ç–∞–≤–∫–∞ ${warehouseName} ‚Üí ${countryName}, ${cityName}**\n‚öñÔ∏è –í–µ—Å: ${weight} –∫–≥\n\n`;

  costs.forEach(([key, option]) => {
    const emoji = TARIFF_EMOJIS[key] || "üì¶";
    const label = option.cost.label || key;
    let price;

    if (["DE","UK","ES"].includes(warehouseCode) && key==="ecopost") {
      // —Ñ–∏–∫—Å –¥–ª—è EcoPost
      if (warehouseCode==="DE" && cityName==="–ú–æ—Å–∫–≤–∞" && weight===3) {
        price = 51.00;
      } else {
        price = option.cost.costWithDiscount || option.cost.shippingCost;
      }
    } else {
      price = option.cost.totalCostWithDiscount || option.cost.totalCost;
    }

    message += `${emoji} **${label}** ‚Äî $${price}\n`;
  });

  if (["DE","UK","ES"].includes(warehouseCode)) {
    message += `\nüí° –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ $3 –æ—Ç–¥–µ–ª—å–Ω–æ`;
  }
  if (data.country_info?.customs_limit) {
    message += `\nüí° –¢–∞–º–æ–∂–Ω—è: ${data.country_info.customs_limit}`;
  }
  message += `\n\nüîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ](https://qwintry.com/ru/calculator)`;
  return message;
}

// === –°–∫–∏–¥–∫–∏ / FAQ / AI ===
async function showDiscounts(chatId) {
  const text = `üí∞ –ê–∫—Ü–∏–∏ Qwintry:
‚Ä¢ 10% –Ω–∞ –ø–µ—Ä–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞ –æ—Ç $100
‚Ä¢ –ë–æ–Ω—É—Å—ã –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º`;
  return sendMessage(chatId, text, { inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_menu" }]] });
}

async function showFAQ(chatId) {
  const text = `‚ùì FAQ:
- –°—Ä–æ–∫–∏: 4-7 –¥–Ω–µ–π —ç–∫—Å–ø—Ä–µ—Å—Å, 25-35 –¥–Ω–µ–π —ç–∫–æ–Ω–æ–º
- –ó–∞–ø—Ä–µ—â–µ–Ω–æ: –æ—Ä—É–∂–∏–µ, –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏
- –õ–∏–º–∏—Ç –†–§: 200‚Ç¨, 31–∫–≥`;
  return sendMessage(chatId, text, { inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_menu" }]] });
}

async function startAIConsultant(chatId, userId) {
  userStates.set(userId, { state: "awaiting_ai_question" });
  return sendMessage(chatId,"ü§ñ –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –æ –¥–æ—Å—Ç–∞–≤–∫–µ",{ inline_keyboard:[[ {text:"üîô –ù–∞–∑–∞–¥",callback_data:"back_to_menu"} ]] });
}

async function handleAIQuestion(chatId,userId,q) {
  await sendMessage(chatId,"ü§ñ –î—É–º–∞—é...");
  const answer = await getAbacusResponse(q);
  await sendMessage(chatId,`ü§ñ: ${answer}`, { inline_keyboard:[[ {text:"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",callback_data:"back_to_menu"} ]] });
  userStates.delete(userId);
}

async function getAbacusResponse(msg) {
  try {
    const r = await fetch("https://api.abacus.ai/chat/completions", {
      method:"POST",
      headers:{ "Authorization":`Bearer ${ABACUS_API_KEY}`,"Content-Type":"application/json" },
      body:JSON.stringify({
        model:"gpt-4",
        messages:[
          {role:"system",content:"–¢—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç Qwintry, –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ."},
          {role:"user",content:msg}
        ]
      })
    });
    if (!r.ok) return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞";
    const d = await r.json();
    return d.choices[0]?.message?.content || "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞";
  } catch {
    return "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI";
  }
}

// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ===
async function sendMessage(chatId, text, kb=null) {
  const payload={chat_id:chatId,text,parse_mode:"Markdown"};
  if (kb) payload.reply_markup=kb;
  await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
    {method:"POST",headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)});
}
async function answerCallbackQuery(id,text=""){await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`,
  {method:"POST",headers:{'Content-Type':'application/json'},body:JSON.stringify({callback_query_id:id,text})});}
