// Telegram Bot –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Qwintry
// –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —Ç–∞—Ä–∏—Ñ–æ–≤

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const ABACUS_API_KEY = process.env.ABACUS_API_KEY;

// –ö—ç—à –¥–ª—è —Å—Ç—Ä–∞–Ω –∏ –≥–æ—Ä–æ–¥–æ–≤
let countriesCache = null;
let citiesCache = {};

// –°–ª–æ–≤–∞—Ä—å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å—Ç—Ä–∞–Ω —Å ID –∏ –∞–ª–∏–∞—Å–∞–º–∏
const COUNTRIES_DICT = {
  // –†–æ—Å—Å–∏—è
  '—Ä–æ—Å—Å–∏—è': { id: 71, name: '–†–æ—Å—Å–∏—è' },
  'russia': { id: 71, name: '–†–æ—Å—Å–∏—è' },
  'ru': { id: 71, name: '–†–æ—Å—Å–∏—è' },
  '—Ä—Ñ': { id: 71, name: '–†–æ—Å—Å–∏—è' },
  '71': { id: 71, name: '–†–æ—Å—Å–∏—è' },
  
  // –°–®–ê
  '—Å—à–∞': { id: 92, name: '–°–®–ê' },
  'usa': { id: 92, name: '–°–®–ê' },
  'us': { id: 92, name: '–°–®–ê' },
  '–∞–º–µ—Ä–∏–∫–∞': { id: 92, name: '–°–®–ê' },
  'america': { id: 92, name: '–°–®–ê' },
  '92': { id: 92, name: '–°–®–ê' },
  
  // –î—Ä—É–≥–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
  '—É–∫—Ä–∞–∏–Ω–∞': { id: 93, name: '–£–∫—Ä–∞–∏–Ω–∞' },
  'ukraine': { id: 93, name: '–£–∫—Ä–∞–∏–Ω–∞' },
  'ua': { id: 93, name: '–£–∫—Ä–∞–∏–Ω–∞' },
  
  '–±–µ–ª–∞—Ä—É—Å—å': { id: 7, name: '–ë–µ–ª–∞—Ä—É—Å—å' },
  'belarus': { id: 7, name: '–ë–µ–ª–∞—Ä—É—Å—å' },
  'by': { id: 7, name: '–ë–µ–ª–∞—Ä—É—Å—å' },
  
  '–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω': { id: 36, name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω' },
  'kazakhstan': { id: 36, name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω' },
  'kz': { id: 36, name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω' },
  
  '–≥–µ—Ä–º–∞–Ω–∏—è': { id: 22, name: '–ì–µ—Ä–º–∞–Ω–∏—è' },
  'germany': { id: 22, name: '–ì–µ—Ä–º–∞–Ω–∏—è' },
  'de': { id: 22, name: '–ì–µ—Ä–º–∞–Ω–∏—è' },
  
  '–∫–∏—Ç–∞–π': { id: 14, name: '–ö–∏—Ç–∞–π' },
  'china': { id: 14, name: '–ö–∏—Ç–∞–π' },
  'cn': { id: 14, name: '–ö–∏—Ç–∞–π' }
};

// –°–ª–æ–≤–∞—Ä—å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏
const CITIES_DICT = {
  '–º–æ—Å–∫–≤–∞': { id: 4050, name: '–ú–æ—Å–∫–≤–∞' },
  'moscow': { id: 4050, name: '–ú–æ—Å–∫–≤–∞' },
  '—Å–ø–±': { id: 4079, name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' },
  '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': { id: 4079, name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' },
  '–ø–∏—Ç–µ—Ä': { id: 4079, name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' },
  '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': { id: 4018, name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥' },
  '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': { id: 4065, name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫' },
  '–∫–∞–∑–∞–Ω—å': { id: 4035, name: '–ö–∞–∑–∞–Ω—å' },
  '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': { id: 4063, name: '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥' },
  '—á–µ–ª—è–±–∏–Ω—Å–∫': { id: 4090, name: '–ß–µ–ª—è–±–∏–Ω—Å–∫' },
  '–æ–º—Å–∫': { id: 4067, name: '–û–º—Å–∫' },
  '—Å–∞–º–∞—Ä–∞': { id: 4077, name: '–°–∞–º–∞—Ä–∞' },
  '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É': { id: 4075, name: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É' },
  '—É—Ñ–∞': { id: 4087, name: '–£—Ñ–∞' },
  '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': { id: 4044, name: '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫' },
  '–≤–æ—Ä–æ–Ω–µ–∂': { id: 4013, name: '–í–æ—Ä–æ–Ω–µ–∂' },
  '–ø–µ—Ä–º—å': { id: 4070, name: '–ü–µ—Ä–º—å' },
  '–≤–æ–ª–≥–æ–≥—Ä–∞–¥': { id: 4012, name: '–í–æ–ª–≥–æ–≥—Ä–∞–¥' }
};

// –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤
const TARIFF_EMOJIS = {
  'qwintry_flash': '‚ö°',
  'ecopost': 'üåç',
  'qwair': '‚úàÔ∏è',
  'qwintry_smart': 'üöÄ'
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook
export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { message } = req.body;
    
    if (!message || !message.text) {
      return res.status(200).json({ ok: true });
    }

    const chatId = message.chat.id;
    const text = message.text.trim();

    console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${chatId}: "${text}"`);

    // –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    if (text === '/start') {
      await sendMessage(chatId, 
        "üöÄ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Qwintry.\n\n" +
        "üìù –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ:\n" +
        "**–≤–µ—Å —Å—Ç—Ä–∞–Ω–∞ –≥–æ—Ä–æ–¥**\n\n" +
        "üìã –ü—Ä–∏–º–µ—Ä—ã:\n" +
        "‚Ä¢ `2 —Ä–æ—Å—Å–∏—è –º–æ—Å–∫–≤–∞`\n" +
        "‚Ä¢ `1.5 russia spb`\n" +
        "‚Ä¢ `3 —Ä—Ñ –µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥`\n\n" +
        "‚ùì –î–ª—è –ø–æ–º–æ—â–∏: /help"
      );
      return res.status(200).json({ ok: true });
    }

    if (text === '/help') {
      await sendMessage(chatId,
        "üìñ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**\n\n" +
        "üî¢ **–§–æ—Ä–º–∞—Ç:** `–≤–µ—Å —Å—Ç—Ä–∞–Ω–∞ –≥–æ—Ä–æ–¥`\n" +
        "‚Ä¢ –í–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–º–æ–∂–Ω–æ –¥—Ä–æ–±–Ω—ã–π: 1.5, 2.3)\n" +
        "‚Ä¢ –°—Ç—Ä–∞–Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (—Ä–æ—Å—Å–∏—è, russia, —Ä—Ñ, ru)\n" +
        "‚Ä¢ –ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n\n" +
        "‚úÖ **–ü—Ä–∏–º–µ—Ä—ã:**\n" +
        "‚Ä¢ `2 —Ä–æ—Å—Å–∏—è –º–æ—Å–∫–≤–∞`\n" +
        "‚Ä¢ `1.5 russia —Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥`\n" +
        "‚Ä¢ `3.2 —Ä—Ñ –∫–∞–∑–∞–Ω—å`\n" +
        "‚Ä¢ `0.5 ru –Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫`\n\n" +
        "üåç **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Ç—Ä–∞–Ω—ã:**\n" +
        "–†–æ—Å—Å–∏—è, –°–®–ê, –£–∫—Ä–∞–∏–Ω–∞, –ë–µ–ª–∞—Ä—É—Å—å, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω –∏ –¥—Ä—É–≥–∏–µ\n\n" +
        "üí° **–°–æ–≤–µ—Ç:** –ü–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ"
      );
      return res.status(200).json({ ok: true });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏
    if (text && !text.startsWith('/')) {
      await handleCalculationRequest(chatId, text);
    }

    return res.status(200).json({ ok: true });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ webhook:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–∞—Å—á–µ—Ç
async function handleCalculationRequest(chatId, text) {
  try {
    // –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const parts = text.toLowerCase().split(/\s+/).filter(p => p.length > 0);
    
    if (parts.length < 3) {
      await sendMessage(chatId, 
        "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!**\n\n" +
        "üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–≤–µ—Å —Å—Ç—Ä–∞–Ω–∞ –≥–æ—Ä–æ–¥`\n" +
        "üìã –ü—Ä–∏–º–µ—Ä: `2 —Ä–æ—Å—Å–∏—è –º–æ—Å–∫–≤–∞`\n\n" +
        "‚ùì –ü–æ–º–æ—â—å: /help"
      );
      return;
    }

    const weightStr = parts[0];
    const countryStr = parts[1];
    const cityStr = parts.slice(2).join(' ');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Å–∞
    const weight = parseFloat(weightStr);
    if (isNaN(weight) || weight <= 0 || weight > 50) {
      await sendMessage(chatId, 
        "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π –≤–µ—Å!**\n\n" +
        "üìè –£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –æ—Ç 0.1 –¥–æ 50 –∫–≥\n" +
        "üìã –ü—Ä–∏–º–µ—Ä: `2.5 —Ä–æ—Å—Å–∏—è –º–æ—Å–∫–≤–∞`"
      );
      return;
    }

    console.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥: –≤–µ—Å=${weight}, —Å—Ç—Ä–∞–Ω–∞="${countryStr}", –≥–æ—Ä–æ–¥="${cityStr}"`);

    // –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω—ã
    const country = await findCountry(countryStr);
    if (!country) {
      await sendMessage(chatId, 
        `‚ùå **–°—Ç—Ä–∞–Ω–∞ "${countryStr}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!**\n\n` +
        "üåç **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Ç—Ä–∞–Ω—ã:**\n" +
        "‚Ä¢ –†–æ—Å—Å–∏—è (—Ä–æ—Å—Å–∏—è, russia, —Ä—Ñ, ru)\n" +
        "‚Ä¢ –°–®–ê (—Å—à–∞, usa, us)\n" +
        "‚Ä¢ –£–∫—Ä–∞–∏–Ω–∞ (—É–∫—Ä–∞–∏–Ω–∞, ukraine, ua)\n" +
        "‚Ä¢ –ë–µ–ª–∞—Ä—É—Å—å (–±–µ–ª–∞—Ä—É—Å—å, belarus, by)\n" +
        "‚Ä¢ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω (–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω, kazakhstan, kz)\n" +
        "‚Ä¢ –ò –¥—Ä—É–≥–∏–µ...\n\n" +
        "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É"
      );
      return;
    }

    // –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞
    const city = await findCity(cityStr, country.id);
    if (!city) {
      await sendMessage(chatId, 
        `‚ùå **–ì–æ—Ä–æ–¥ "${cityStr}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–∞–Ω–µ ${country.name}!**\n\n` +
        "üèôÔ∏è **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏:**\n" +
        "‚Ä¢ –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥\n" +
        "‚Ä¢ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, –ö–∞–∑–∞–Ω—å, –ß–µ–ª—è–±–∏–Ω—Å–∫\n" +
        "‚Ä¢ –û–º—Å–∫, –°–∞–º–∞—Ä–∞, –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É\n\n" +
        "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è"
      );
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ: ${country.name} (${country.id}), ${city.name} (${city.id})`);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—á–µ—Ç–∞
    await sendMessage(chatId, "‚è≥ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏...");

    // –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏
    const result = await calculateDelivery(weight, country.id, city.id);
    
    if (result.success) {
      const formattedResult = formatDeliveryResult(result.data, country.name, city.name, weight);
      await sendMessage(chatId, formattedResult);
    } else {
      await sendMessage(chatId, 
        `‚ùå **–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:**\n${result.error}\n\n` +
        "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
      );
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    await sendMessage(chatId, 
      "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞**\n\n" +
      "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"
    );
  }
}

// –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω—ã
async function findCountry(query) {
  const normalizedQuery = query.toLowerCase().trim();
  
  // –ü–æ–∏—Å–∫ –≤ —Å–ª–æ–≤–∞—Ä–µ
  if (COUNTRIES_DICT[normalizedQuery]) {
    console.log(`üéØ –°—Ç—Ä–∞–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ: ${COUNTRIES_DICT[normalizedQuery].name}`);
    return COUNTRIES_DICT[normalizedQuery];
  }

  // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API
  try {
    if (!countriesCache) {
      console.log('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –∏–∑ API...');
      const response = await fetch('https://q3-api.qwintry.com/ru/countries');
      if (response.ok) {
        countriesCache = await response.json();
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${countriesCache.length} —Å—Ç—Ä–∞–Ω`);
      }
    }

    if (countriesCache && Array.isArray(countriesCache)) {
      const found = countriesCache.find(country => 
        country.nameRu?.toLowerCase().includes(normalizedQuery) ||
        country.nameEn?.toLowerCase().includes(normalizedQuery) ||
        country.code?.toLowerCase() === normalizedQuery ||
        country.id?.toString() === normalizedQuery
      );

      if (found) {
        console.log(`üéØ –°—Ç—Ä–∞–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ API: ${found.nameRu || found.nameEn}`);
        return { id: found.id, name: found.nameRu || found.nameEn };
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω—ã —á–µ—Ä–µ–∑ API:', error);
  }

  console.log(`‚ùå –°—Ç—Ä–∞–Ω–∞ "${query}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
  return null;
}

// –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞
async function findCity(query, countryId) {
  const normalizedQuery = query.toLowerCase().trim();
  
  // –ü–æ–∏—Å–∫ –≤ —Å–ª–æ–≤–∞—Ä–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –†–æ—Å—Å–∏–∏)
  if (countryId === 71 && CITIES_DICT[normalizedQuery]) {
    console.log(`üéØ –ì–æ—Ä–æ–¥ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ: ${CITIES_DICT[normalizedQuery].name}`);
    return CITIES_DICT[normalizedQuery];
  }

  // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API
  try {
    const cacheKey = `${countryId}_${normalizedQuery}`;
    
    if (!citiesCache[cacheKey]) {
      console.log(`üì° –ò—â–µ–º –≥–æ—Ä–æ–¥ "${query}" –≤ —Å—Ç—Ä–∞–Ω–µ ${countryId}...`);
      
      const response = await fetch(
        `https://q3-api.qwintry.com/ru/cities?country_id=${countryId}&query=${encodeURIComponent(query)}`
      );
      
      if (response.ok) {
        const cities = await response.json();
        citiesCache[cacheKey] = cities;
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${cities.length} –≥–æ—Ä–æ–¥–æ–≤`);
      }
    }

    const cities = citiesCache[cacheKey];
    if (cities && Array.isArray(cities) && cities.length > 0) {
      const found = cities.find(city => 
        city.nameRu?.toLowerCase() === normalizedQuery ||
        city.nameEn?.toLowerCase() === normalizedQuery
      ) || cities[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥

      if (found) {
        console.log(`üéØ –ì–æ—Ä–æ–¥ –Ω–∞–π–¥–µ–Ω: ${found.nameRu || found.nameEn}`);
        return { id: found.id, name: found.nameRu || found.nameEn };
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ API:', error);
  }

  console.log(`‚ùå –ì–æ—Ä–æ–¥ "${query}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  return null;
}

// –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
async function calculateDelivery(weight, countryId, cityId) {
  try {
    console.log(`üìä –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: –≤–µ—Å=${weight}–∫–≥, —Å—Ç—Ä–∞–Ω–∞=${countryId}, –≥–æ—Ä–æ–¥=${cityId}`);

    const params = new URLSearchParams({
      weight: weight.toString(),
      country: countryId.toString(),
      city: cityId.toString(),
      weightMeasurement: 'kg',
      dimensions: '1x1x1',
      dimensionsMeasurement: 'cm'
    });

    const response = await fetch('https://q3-api.qwintry.com/ru/calculate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json'
      },
      body: params.toString()
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const data = await response.json();
    console.log('üì¶ –û—Ç–≤–µ—Ç API –ø–æ–ª—É—á–µ–Ω:', JSON.stringify(data, null, 2));

    if (!data.costs || Object.keys(data.costs).length === 0) {
      return {
        success: false,
        error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞'
      };
    }

    return { success: true, data };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:', error);
    return {
      success: false,
      error: `–û—à–∏–±–∫–∞ API: ${error.message}`
    };
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function formatDeliveryResult(data, countryName, cityName, weight) {
  if (!data.costs || Object.keys(data.costs).length === 0) {
    return "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.";
  }

  let message = `üì¶ **–î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –°–®–ê ‚Üí ${countryName} (${cityName})**\n`;
  message += `‚öñÔ∏è –í–µ—Å: ${weight} –∫–≥\n\n`;

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ—ã –ø–æ —Ü–µ–Ω–µ
  const sortedTariffs = Object.entries(data.costs)
    .map(([key, option]) => ({
      key,
      option,
      price: option.cost?.totalCostWithDiscount || option.cost?.totalCost || 0
    }))
    .sort((a, b) => a.price - b.price);

  for (const { key, option } of sortedTariffs) {
    if (!option?.cost) continue;

    const emoji = TARIFF_EMOJIS[key] || 'üì¶';
    const label = option.cost.label || key;
    const price = option.cost.totalCostWithDiscount || option.cost.totalCost;
    const currency = option.cost.currency || '$';
    const days = option.days || '‚Äî';

    message += `${emoji} **${label}** ‚Äî ${currency}${price} (${days} –¥–Ω–µ–π)\n`;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–º–æ–∂–Ω–µ –¥–ª—è –†–æ—Å—Å–∏–∏
  if (data.country_info?.customs_limit) {
    message += `\nüí° **–¢–∞–º–æ–∂–Ω—è:** ${data.country_info.customs_limit}`;
  }

  message += `\n\nüîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ](https://qwintry.com/ru/calculator)`;

  return message;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendMessage(chatId, text) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'Markdown',
        disable_web_page_preview: true
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', errorData);
    } else {
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Abacus AI (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
async function getAbacusResponse(message) {
  try {
    const response = await fetch('https://api.abacus.ai/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${ABACUS_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å Qwintry. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.'
          },
          {
            role: 'user',
            content: message
          }
        ],
        max_tokens: 500,
        temperature: 0.7
      }),
    });

    if (response.ok) {
      const data = await response.json();
      return data.choices[0]?.message?.content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.';
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Abacus AI:', error);
  }
  
  return '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.';
}
