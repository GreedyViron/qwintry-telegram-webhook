// api/telegram.js
// Telegram webhook ‚Üí Abacus.AI + –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏ Qwintry

const APPS_GET_CHAT_URL = 'https://apps.abacus.ai/api/getChatResponse';
const DEPLOYMENT_ID = '1413dbc596';

// –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
const userStates = {};

export default async function handler(req, res) {
  try {
    if (req.method !== 'POST') {
      return res.status(200).send('OK: use POST from Telegram webhook');
    }

    const ABACUS_DEPLOYMENT_TOKEN = process.env.ABACUS_DEPLOYMENT_TOKEN;
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

    if (!ABACUS_DEPLOYMENT_TOKEN || !TELEGRAM_BOT_TOKEN) {
      console.error('Missing env vars', {
        hasAbacus: !!ABACUS_DEPLOYMENT_TOKEN,
        hasTg: !!TELEGRAM_BOT_TOKEN
      });
      return res.status(500).send('Server not configured');
    }

    const update = req.body || {};
    const msg = update.message || update.edited_message;
    if (!msg || (!msg.text && !msg.caption)) {
      console.log('No text in update:', JSON.stringify(update).slice(0, 500));
      return res.status(200).send('OK: no text');
    }

    const chatId = msg.chat.id;
    const userText = (msg.text || msg.caption || '').trim();

    // –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    if (userStates[chatId]?.step) {
      await handleCalcConversation(chatId, userText);
      return res.status(200).send('OK');
    }

    // –ö–æ–º–∞–Ω–¥—ã
    if (userText === '/start') {
      await sendTgWithKeyboard(chatId,
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Banderolka/Qwintry.\n\n–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å ‚Äî —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: ¬´–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä¬ª, ¬´–ü–æ–º–æ—â—å¬ª.',
        mainKeyboard()
      );
      return res.status(200).send('OK');
    }

    if (userText === '/help' || userText === '–ü–æ–º–æ—â—å') {
      await sendTg(chatId, '–Ø –ø–æ–º–æ–≥—É —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –ø–æ Banderolka/Qwintry: —Ç–∞—Ä–∏—Ñ—ã, —Å—Ä–æ–∫–∏, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—Ç—ã.\n–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –±–æ–ª—å—à–µ –æ–ø—Ü–∏–π.\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º.');
      return res.status(200).send('OK');
    }

    if (userText === '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä') {
      userStates[chatId] = { step: 'hub' };
      await sendTg(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–∫–ª–∞–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, DE1, US1):');
      return res.status(200).send('OK');
    }

    // --- –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∏–¥—ë—Ç –≤ Abacus ---
    const url = `${APPS_GET_CHAT_URL}?deploymentToken=${encodeURIComponent(ABACUS_DEPLOYMENT_TOKEN)}&deploymentId=${encodeURIComponent(DEPLOYMENT_ID)}`;
    const body = {
      messages: [{ is_user: true, text: userText }],
      conversationId: String(chatId),
      userId: String(chatId)
    };

    const resp = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body)
    });

    const raw = await resp.text();
    let botReply = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.';
    if (resp.ok) {
      try {
        const data = JSON.parse(raw || '{}');
        botReply =
          data?.responseText ||
          data?.text ||
          data?.response ||
          data?.message ||
          data?.choices?.[0]?.message?.content ||
          data?.result?.text ||
          botReply;

        if (!data?.responseText && data?.result?.messages?.length) {
          const lastAssistant = [...data.result.messages].reverse().find(m => m && m.is_user === false && typeof m.text === 'string');
          if (lastAssistant?.text) botReply = lastAssistant.text;
        }

        if (!botReply || typeof botReply !== 'string' || !botReply.trim()) {
          botReply = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.';
        }
      } catch (e) {
        console.error('JSON parse error:', e);
      }
    } else {
      console.error('Abacus non-OK', resp.status, raw.slice(0, 500));
    }

    await sendTg(chatId, botReply);
    return res.status(200).send('OK');
  } catch (e) {
    console.error('Webhook error:', e);
    return res.status(200).send('OK');
  }
}

// ----------------- helpers -----------------

// –ü–æ—à–∞–≥–æ–≤—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
async function handleCalcConversation(chatId, text) {
  const state = userStates[chatId] || {};

  if (state.step === 'hub') {
    state.hub = text.toUpperCase();
    state.step = 'country';
    await sendTg(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, RU):');
  } else if (state.step === 'country') {
    state.country = text.toUpperCase();
    state.step = 'weight';
    await sendTg(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–æ—Å—ã–ª–∫–∏ (–≤ –∫–≥):');
  } else if (state.step === 'weight') {
    state.weight = text;
    state.step = null; // —Å–±—Ä–æ—Å
    await doCalc(chatId, state.hub, state.country, state.weight);
    delete userStates[chatId];
  }

  userStates[chatId] = state;
}

// –ó–∞–ø—Ä–æ—Å –≤ API –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ Qwintry
async function doCalc(chatId, hub, country, weight) {
  const body = {
    hub: hub,
    weight: weight.toString(),
    weightMeasurement: "kg",
    dimensions: "1x1x1",
    dimensionsMeasurement: "cm",
    country: country,
    city: 4050,
    zip: "100000",
    itemsCost: "1",
    insurance: null,
    advancedMode: false,
    source: "calc"
  };

  try {
    const resp = await fetch("https://q3-api.qwintry.com/ru/frontend/calculator/calculate", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(body)
    });

    const data = await resp.json();
    if (data?.costs) {
      let reply = `üì¶ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ (–≤–µ—Å: ${weight} –∫–≥, –∏–∑ —Å–∫–ª–∞–¥–∞ ${hub} –≤ ${country}):\n\n`;

      for (const [method, details] of Object.entries(data.costs)) {
        const label = details?.cost?.label || method;
        const price = details?.cost?.costWithDiscount || details?.cost?.shippingCost;
        const total = details?.cost?.totalCostWithDiscount || details?.cost?.totalCost;
        const days = details?.days || '?';

        reply += `üîπ ${label}\n–¶–µ–Ω–∞: ${price} USD\n–ò—Ç–æ–≥–æ: ${total} USD\n–°—Ä–æ–∫: ${days}\n\n`;
      }

      await sendTg(chatId, reply.trim());
    } else {
      await sendTg(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É üòî');
    }
  } catch (err) {
    console.error('Calc error', err);
    await sendTg(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏.');
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
async function sendTg(chatId, text) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  const resp = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id: chatId, text, parse_mode: 'Markdown' })
  });
  const raw = await resp.text();
  if (!resp.ok) {
    console.error('Telegram sendMessage error', resp.status, raw.slice(0, 300));
  }
  return raw;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
async function sendTgWithKeyboard(chatId, text, keyboard) {
  const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  const resp = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      reply_markup: keyboard,
      parse_mode: 'Markdown'
    })
  });
  const raw = await resp.text();
  if (!resp.ok) {
    console.error('Telegram sendMessage (keyboard) error', resp.status, raw.slice(0, 300));
  }
  return raw;
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function mainKeyboard() {
  return {
    keyboard: [
      [{ text: "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" }, { text: "–ü–æ–º–æ—â—å" }]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  };
}
