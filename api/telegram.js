// === QWINTRY TELEGRAM BOT ===
// –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –º–µ–Ω—é + –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º (state-machine)

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const ABACUS_API_KEY = process.env.ABACUS_API_KEY;

const userStates = {}; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø–æ chatId

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function mainMenu() {
  return {
    keyboard: [
      [{ text: "üì¶ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" }],
      [{ text: "üí∏ –°–∫–∏–¥–∫–∏" }, { text: "‚ÑπÔ∏è FAQ" }]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  };
}

// Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
export default async function handler(req, res) {
  if (req.method !== "POST") return res.status(405).end();

  const body = req.body;

  if (!body.message) return res.status(200).end();

  const chatId = body.message.chat.id;
  const text = body.message.text?.trim();

  console.log("üì© Incoming:", chatId, text);

  // –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
  if (text === "/start") {
    await sendMessage(
      chatId,
      "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç‚Äë–ø–æ–º–æ—â–Ω–∏–∫ –ë–∞–Ω–¥–µ—Ä–æ–ª—å–∫–∏.\n\n" +
        "üí¨ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é –Ω–∏–∂–µ.",
      mainMenu()
    );
    return res.status(200).end();
  }

  // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
  if (text === "/help") {
    await sendMessage(
      chatId,
      "üìñ –ü–æ–º–æ—â—å:\n\n" +
        "–í—ã –º–æ–∂–µ—Ç–µ:\n" +
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é (–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, —Å–∫–∏–¥–∫–∏, FAQ)\n" +
        "‚Ä¢ –°–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é ‚Äî —è –ø–æ–ø—Ä–æ–±—É—é –æ—Ç–≤–µ—Ç–∏—Ç—å üòâ"
    );
    return res.status(200).end();
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —é–∑–µ—Ä–∞
  const state = userStates[chatId]?.state;

  // –ó–∞–ø—É—Å–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
  if (text === "üì¶ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä" || text === "/calc") {
    userStates[chatId] = { state: "awaiting_hub" };
    await sendMessage(
      chatId,
      "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
      {
        keyboard: [
          [{ text: "üá∫üá∏ –°–®–ê" }, { text: "üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è" }, { text: "üá®üá≥ –ö–∏—Ç–∞–π" }],
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∞" }]
        ],
        resize_keyboard: true
      }
    );
    return res.status(200).end();
  }

  // === State machine –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ ===
  if (state === "awaiting_hub") {
    let hubCode = null;
    if (/—Å—à–∞|usa/i.test(text)) hubCode = "US1";
    if (/–≥–µ—Ä–º|germ/i.test(text)) hubCode = "DE1";
    if (/–∫–∏—Ç/i.test(text)) hubCode = "CN1";

    if (!hubCode) {
      await sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥: –°–®–ê, –ì–µ—Ä–º–∞–Ω–∏—è –∏–ª–∏ –ö–∏—Ç–∞–π");
      return res.status(200).end();
    }

    userStates[chatId] = { state: "awaiting_country", hubCode };
    await sendMessage(chatId, "üåç –í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è)");
    return res.status(200).end();
  }

  if (state === "awaiting_country") {
    const country = text.trim();
    userStates[chatId].country = country;
    userStates[chatId].state = "awaiting_city";
    await sendMessage(chatId, "üèô –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞)");
    return res.status(200).end();
  }

  if (state === "awaiting_city") {
    const city = text.trim();
    userStates[chatId].city = city;
    userStates[chatId].state = "awaiting_weight";
    await sendMessage(chatId, "‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–æ—Å—ã–ª–∫–∏ –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5)");
    return res.status(200).end();
  }

  if (state === "awaiting_weight") {
    const weight = parseFloat(text.replace(",", "."));
    if (isNaN(weight) || weight <= 0) {
      await sendMessage(chatId, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5)");
      return res.status(200).end();
    }

    const { hubCode, country, city } = userStates[chatId];
    delete userStates[chatId]; // —Å–±—Ä–æ—Å —Å—Ç–µ–π—Ç–∞

    await sendMessage(chatId, "‚è≥ –°—á–∏—Ç–∞—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏...");

    // –í—ã–∑–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    const result = await calculateDelivery(hubCode, country, city, weight);

    if (result.success) {
      await sendMessage(chatId, formatResult(result.data, country, city, weight));
    } else {
      await sendMessage(
        chatId,
        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É.\n" +
          "–ü—Ä–∏—á–∏–Ω–∞: " +
          result.error +
          "\n\nüëâ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ: https://qwintry.com/ru/calculator"
      );
    }
    return res.status(200).end();
  }

  // –ï—Å–ª–∏ –Ω–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ‚Üí –æ—Ç–≤–µ—á–∞–µ–º —á–µ—Ä–µ–∑ Abacus AI
  if (text && !text.startsWith("/")) {
    const reply = await getAbacusAnswer(text);
    await sendMessage(chatId, reply, mainMenu());
  }

  return res.status(200).end();
}

// === –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Qwintry API ===
async function calculateDelivery(hubCode, country, city, weight) {
  try {
    const params = new URLSearchParams({
      hubCode,
      weight: weight.toString(),
      weightMeasurement: "kg",
      country,
      city,
      dimensions: "1x1x1",
      dimensionsMeasurement: "cm"
    });

    const res = await fetch("https://q3-api.qwintry.com/ru/calculate", {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: params.toString()
    });

    if (!res.ok) throw new Error(`HTTP ${res.status}`);

    const data = await res.json();
    if (!data.costs) throw new Error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤");

    return { success: true, data };
  } catch (err) {
    console.error("‚ùå API error:", err);
    return { success: false, error: err.message };
  }
}

// === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ===
function formatResult(data, country, city, weight) {
  let msg = `üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ ‚Üí ${country}, ${city}\n‚öñÔ∏è –í–µ—Å: ${weight} –∫–≥\n\n`;

  for (const [key, opt] of Object.entries(data.costs)) {
    if (!opt.cost) continue;
    const name = opt.cost.label || key;
    const price = opt.cost.totalCostWithDiscount || opt.cost.totalCost;
    const cur = opt.cost.currency || "$";
    const days = opt.days || "-";
    msg += `‚Ä¢ ${name} ‚Äî ${cur}${price} (${days} –¥–Ω–µ–π)\n`;
  }
  return msg;
}

// === Abacus AI –æ—Ç–≤–µ—Ç—ã ===
async function getAbacusAnswer(message) {
  try {
    const res = await fetch("https://api.abacus.ai/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${ABACUS_API_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: "–¢—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç Qwintry." },
          { role: "user", content: message }
        ]
      })
    });

    if (res.ok) {
      const data = await res.json();
      return data.choices[0].message.content || "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç üòî";
    }
  } catch (err) {
    console.error("‚ùå Abacus error:", err);
  }
  return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.";
}

// === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram ===
async function sendMessage(chatId, text, keyboard = null) {
  try {
    await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: "Markdown",
        reply_markup: keyboard
      })
    });
  } catch (err) {
    console.error("‚ùå Telegram send error:", err);
  }
}
