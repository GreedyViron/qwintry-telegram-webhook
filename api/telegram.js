// /api/telegram.js
import { sendMessage, answerCallbackQuery } from './lib/utils.js';
import { handleCalcCommand, handleCalcCallback } from './lib/calc.js';
import { handleAICommand } from './lib/ai.js';

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(200).send('OK: use POST');
  }

  try {
    const update = req.body;
    console.log('üì® Update:', JSON.stringify(update, null, 2));

    if (update.message) {
      const chatId = update.message.chat.id;
      const text = (update.message.text || '').trim();

      if (text === '/start') {
        await sendMessage(chatId, 'üéâ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Qwintry. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\nüì¶ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\nü§ñ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç\nüí∞ –°–∫–∏–¥–∫–∏ (–≤ –±—É–¥—É—â–µ–º).');
        return res.status(200).send('OK');
      }

      // AI –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é: –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç
      await handleAICommand(chatId, text);
    } 
    else if (update.callback_query) {
      const cq = update.callback_query;
      console.log(`üéØ Callback: ${cq.data}`);
      await answerCallbackQuery(cq.id);

      if (cq.data.startsWith('calc')) {
        await handleCalcCallback(cq.message.chat.id, cq.data);
      }
    }

    res.status(200).send('OK');
  } catch (e) {
    console.error('‚ùå Error:', e);
    res.status(200).send('OK');
  }
}
