// Telegram Bot –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ Qwintry (–ë–∞–Ω–¥–µ—Ä–æ–ª—å–∫–∞)
// –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç —Å –º–µ–Ω—é, –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º –∏ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const ABACUS_API_KEY = process.env.ABACUS_API_KEY;

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis/Database)
const userStates = new Map();

// –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
const STATES = {
  IDLE: 'idle',
  CALC_WAREHOUSE: 'calc_warehouse',
  CALC_COUNTRY: 'calc_country',
  CALC_CITY: 'calc_city',
  CALC_WEIGHT: 'calc_weight'
};

// –°–∫–ª–∞–¥—ã
const WAREHOUSES = {
  'US1': { code: 'US1', name: '–°–®–ê', emoji: 'üá∫üá∏' },
  'DE1': { code: 'DE1', name: '–ì–µ—Ä–º–∞–Ω–∏—è', emoji: 'üá©üá™' },
  'CN1': { code: 'CN1', name: '–ö–∏—Ç–∞–π', emoji: 'üá®üá≥' }
};

// –ö—ç—à –¥–ª—è —Å—Ç—Ä–∞–Ω –∏ –≥–æ—Ä–æ–¥–æ–≤
let countriesCache = null;
let citiesCache = {};

// –°–ª–æ–≤–∞—Ä—å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å—Ç—Ä–∞–Ω —Å ID –∏ –∞–ª–∏–∞—Å–∞–º–∏
const COUNTRIES_DICT = {
  // –†–æ—Å—Å–∏—è
  '—Ä–æ—Å—Å–∏—è': { id: 71, name: '–†–æ—Å—Å–∏—è' },
  'russia': { id: 71, name: '–†–æ—Å—Å–∏—è' },
  'ru': { id: 71, name: '–†–æ—Å—Å–∏—è' },
  '—Ä—Ñ': { id: 71, name: '–†–æ—Å—Å–∏—è' },
  '71': { id: 71, name: '–†–æ—Å—Å–∏—è' },
  
  // –°–®–ê
  '—Å—à–∞': { id: 92, name: '–°–®–ê' },
  'usa': { id: 92, name: '–°–®–ê' },
  'us': { id: 92, name: '–°–®–ê' },
  '–∞–º–µ—Ä–∏–∫–∞': { id: 92, name: '–°–®–ê' },
  'america': { id: 92, name: '–°–®–ê' },
  '92': { id: 92, name: '–°–®–ê' },
  
  // –î—Ä—É–≥–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
  '—É–∫—Ä–∞–∏–Ω–∞': { id: 93, name: '–£–∫—Ä–∞–∏–Ω–∞' },
  'ukraine': { id: 93, name: '–£–∫—Ä–∞–∏–Ω–∞' },
  'ua': { id: 93, name: '–£–∫—Ä–∞–∏–Ω–∞' },
  
  '–±–µ–ª–∞—Ä—É—Å—å': { id: 7, name: '–ë–µ–ª–∞—Ä—É—Å—å' },
  'belarus': { id: 7, name: '–ë–µ–ª–∞—Ä—É—Å—å' },
  'by': { id: 7, name: '–ë–µ–ª–∞—Ä—É—Å—å' },
  
  '–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω': { id: 36, name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω' },
  'kazakhstan': { id: 36, name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω' },
  'kz': { id: 36, name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω' },
  
  '–≥–µ—Ä–º–∞–Ω–∏—è': { id: 22, name: '–ì–µ—Ä–º–∞–Ω–∏—è' },
  'germany': { id: 22, name: '–ì–µ—Ä–º–∞–Ω–∏—è' },
  'de': { id: 22, name: '–ì–µ—Ä–º–∞–Ω–∏—è' },
  
  '–∫–∏—Ç–∞–π': { id: 14, name: '–ö–∏—Ç–∞–π' },
  'china': { id: 14, name: '–ö–∏—Ç–∞–π' },
  'cn': { id: 14, name: '–ö–∏—Ç–∞–π' }
};

// –°–ª–æ–≤–∞—Ä—å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏
const CITIES_DICT = {
  '–º–æ—Å–∫–≤–∞': { id: 4050, name: '–ú–æ—Å–∫–≤–∞' },
  'moscow': { id: 4050, name: '–ú–æ—Å–∫–≤–∞' },
  '—Å–ø–±': { id: 4079, name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' },
  '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': { id: 4079, name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' },
  '–ø–∏—Ç–µ—Ä': { id: 4079, name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' },
  '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': { id: 4018, name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥' },
  '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': { id: 4065, name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫' },
  '–∫–∞–∑–∞–Ω—å': { id: 4035, name: '–ö–∞–∑–∞–Ω—å' },
  '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': { id: 4063, name: '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥' },
  '—á–µ–ª—è–±–∏–Ω—Å–∫': { id: 4090, name: '–ß–µ–ª—è–±–∏–Ω—Å–∫' },
  '–æ–º—Å–∫': { id: 4067, name: '–û–º—Å–∫' },
  '—Å–∞–º–∞—Ä–∞': { id: 4077, name: '–°–∞–º–∞—Ä–∞' },
  '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É': { id: 4075, name: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É' },
  '—É—Ñ–∞': { id: 4087, name: '–£—Ñ–∞' },
  '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': { id: 4044, name: '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫' },
  '–≤–æ—Ä–æ–Ω–µ–∂': { id: 4013, name: '–í–æ—Ä–æ–Ω–µ–∂' },
  '–ø–µ—Ä–º—å': { id: 4070, name: '–ü–µ—Ä–º—å' },
  '–≤–æ–ª–≥–æ–≥—Ä–∞–¥': { id: 4012, name: '–í–æ–ª–≥–æ–≥—Ä–∞–¥' }
};

// –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤
const TARIFF_EMOJIS = {
  'qwintry_flash': '‚ö°',
  'ecopost': 'üåç',
  'qwair': '‚úàÔ∏è',
  'qwintry_smart': 'üöÄ'
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook
export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { message, callback_query } = req.body;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫)
    if (callback_query) {
      await handleCallbackQuery(callback_query);
      return res.status(200).json({ ok: true });
    }
    
    if (!message || !message.text) {
      return res.status(200).json({ ok: true });
    }

    const chatId = message.chat.id;
    const text = message.text.trim();
    const userId = message.from.id;

    console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${chatId}: "${text}"`);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userState = getUserState(userId);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (text === '/start') {
      await handleStartCommand(chatId, userId);
    } else if (text === '/calc') {
      await startCalculator(chatId, userId);
    } else if (text === '/help') {
      await handleHelpCommand(chatId);
    } else if (text === '/menu') {
      await showMainMenu(chatId, userId);
    } else {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
      await handleUserInput(chatId, userId, text, userState);
    }

    return res.status(200).json({ ok: true });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ webhook:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async function handleCallbackQuery(callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;

  console.log(`üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: ${data}`);

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
  await answerCallbackQuery(callbackQuery.id);

  if (data === 'calc') {
    await startCalculator(chatId, userId);
  } else if (data === 'discounts') {
    await showDiscounts(chatId);
  } else if (data === 'faq') {
    await showFAQ(chatId);
  } else if (data === 'back_to_menu') {
    await showMainMenu(chatId, userId);
  } else if (data.startsWith('warehouse_')) {
    const warehouse = data.replace('warehouse_', '');
    await handleWarehouseSelection(chatId, userId, warehouse);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserState(userId) {
  if (!userStates.has(userId)) {
    userStates.set(userId, {
      state: STATES.IDLE,
      data: {}
    });
  }
  return userStates.get(userId);
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function setUserState(userId, state, data = {}) {
  const currentState = getUserState(userId);
  userStates.set(userId, {
    state: state,
    data: { ...currentState.data, ...data }
  });
}

// –ö–æ–º–∞–Ω–¥–∞ /start
async function handleStartCommand(chatId, userId) {
  setUserState(userId, STATES.IDLE);
  
  const welcomeMessage = 
    "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ë–∞–Ω–¥–µ—Ä–æ–ª—å–∫–∏.\n\n" +
    "üí¨ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é –Ω–∏–∂–µ.";

  await sendMessage(chatId, welcomeMessage);
  await showMainMenu(chatId, userId);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function showMainMenu(chatId, userId) {
  setUserState(userId, STATES.IDLE);
  
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üì¶ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', callback_data: 'calc' },
        { text: 'üí∏ –°–∫–∏–¥–∫–∏', callback_data: 'discounts' }
      ],
      [
        { text: '‚ÑπÔ∏è FAQ', callback_data: 'faq' }
      ]
    ]
  };

  await sendMessage(chatId, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", keyboard);
}

// –ó–∞–ø—É—Å–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
async function startCalculator(chatId, userId) {
  setUserState(userId, STATES.CALC_WAREHOUSE);
  
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üá∫üá∏ –°–®–ê (US1)', callback_data: 'warehouse_US1' },
        { text: 'üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è (DE1)', callback_data: 'warehouse_DE1' }
      ],
      [
        { text: 'üá®üá≥ –ö–∏—Ç–∞–π (CN1)', callback_data: 'warehouse_CN1' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }
      ]
    ]
  };

  await sendMessage(chatId, 
    "üì¶ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏**\n\n" +
    "–®–∞–≥ 1/4: –í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", 
    keyboard
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞
async function handleWarehouseSelection(chatId, userId, warehouse) {
  if (!WAREHOUSES[warehouse]) {
    await sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∫–ª–∞–¥!");
    return;
  }

  setUserState(userId, STATES.CALC_COUNTRY, { warehouse });
  
  const warehouseInfo = WAREHOUSES[warehouse];
  await sendMessage(chatId, 
    `‚úÖ –í—ã–±—Ä–∞–Ω —Å–∫–ª–∞–¥: ${warehouseInfo.emoji} ${warehouseInfo.name}\n\n` +
    "–®–∞–≥ 2/4: –í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:\n" +
    "üìù –ù–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è, –°–®–ê, –ì–µ—Ä–º–∞–Ω–∏—è, –£–∫—Ä–∞–∏–Ω–∞"
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
async function handleUserInput(chatId, userId, text, userState) {
  switch (userState.state) {
    case STATES.CALC_COUNTRY:
      await handleCountryInput(chatId, userId, text);
      break;
    
    case STATES.CALC_CITY:
      await handleCityInput(chatId, userId, text);
      break;
    
    case STATES.CALC_WEIGHT:
      await handleWeightInput(chatId, userId, text);
      break;
    
    case STATES.IDLE:
    default:
      // AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
      await handleAIConsultant(chatId, text);
      break;
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
async function handleCountryInput(chatId, userId, text) {
  const country = await findCountry(text);
  
  if (!country) {
    await sendMessage(chatId, 
      `‚ùå –°—Ç—Ä–∞–Ω–∞ "${text}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!\n\n` +
      "üåç **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Ç—Ä–∞–Ω—ã:**\n" +
      "‚Ä¢ –†–æ—Å—Å–∏—è (—Ä–æ—Å—Å–∏—è, russia, —Ä—Ñ, ru)\n" +
      "‚Ä¢ –°–®–ê (—Å—à–∞, usa, us)\n" +
      "‚Ä¢ –£–∫—Ä–∞–∏–Ω–∞ (—É–∫—Ä–∞–∏–Ω–∞, ukraine, ua)\n" +
      "‚Ä¢ –ë–µ–ª–∞—Ä—É—Å—å (–±–µ–ª–∞—Ä—É—Å—å, belarus, by)\n" +
      "‚Ä¢ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω (–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω, kazakhstan, kz)\n" +
      "‚Ä¢ –ò –¥—Ä—É–≥–∏–µ...\n\n" +
      "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É"
    );
    return;
  }

  setUserState(userId, STATES.CALC_CITY, { country });
  
  await sendMessage(chatId, 
    `‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞: ${country.name}\n\n` +
    "–®–∞–≥ 3/4: –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:\n" +
    "üìù –ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
async function handleCityInput(chatId, userId, text) {
  const userState = getUserState(userId);
  const country = userState.data.country;
  
  const city = await findCity(text, country.id);
  
  if (!city) {
    await sendMessage(chatId, 
      `‚ùå –ì–æ—Ä–æ–¥ "${text}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–∞–Ω–µ ${country.name}!\n\n` +
      "üèôÔ∏è **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏:**\n" +
      "‚Ä¢ –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥\n" +
      "‚Ä¢ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, –ö–∞–∑–∞–Ω—å, –ß–µ–ª—è–±–∏–Ω—Å–∫\n" +
      "‚Ä¢ –û–º—Å–∫, –°–∞–º–∞—Ä–∞, –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É\n\n" +
      "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è"
    );
    return;
  }

  setUserState(userId, STATES.CALC_WEIGHT, { city });
  
  await sendMessage(chatId, 
    `‚úÖ –í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: ${city.name}\n\n` +
    "–®–∞–≥ 4/4: –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–æ—Å—ã–ª–∫–∏ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:\n" +
    "üìù –ù–∞–ø—Ä–∏–º–µ—Ä: 2, 1.5, 3.2 (–æ—Ç 0.1 –¥–æ 50 –∫–≥)"
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–µ—Å–∞
async function handleWeightInput(chatId, userId, text) {
  const weight = parseFloat(text);
  
  if (isNaN(weight) || weight <= 0 || weight > 50) {
    await sendMessage(chatId, 
      "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π –≤–µ—Å!**\n\n" +
      "üìè –£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –æ—Ç 0.1 –¥–æ 50 –∫–≥\n" +
      "üìã –ü—Ä–∏–º–µ—Ä: 2.5"
    );
    return;
  }

  const userState = getUserState(userId);
  const { warehouse, country, city } = userState.data;

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
  setUserState(userId, STATES.IDLE);

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—á–µ—Ç–∞
  await sendMessage(chatId, "‚è≥ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏...");

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π hub –¥–ª—è –†–æ—Å—Å–∏–∏
  let hubCode = warehouse;
  if (country.id === 71) { // –†–æ—Å—Å–∏—è
    hubCode = 'DE1'; // –î–ª—è –†–æ—Å—Å–∏–∏ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º DE1
  }

  // –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏
  const result = await calculateDelivery(weight, country.id, city.id, hubCode);
  
  if (result.success) {
    const formattedResult = formatDeliveryResult(
      result.data, 
      WAREHOUSES[warehouse].name, 
      country.name, 
      city.name, 
      weight
    );
    await sendMessage(chatId, formattedResult);
  } else {
    await sendMessage(chatId, 
      "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.**\n\n" +
      "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n" +
      "‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n" +
      "‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ –≤–µ—Å—É\n" +
      "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞\n\n" +
      "üëâ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–∫–ª–∞–¥ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ: https://qwintry.com/ru/calculator"
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞
  setTimeout(() => showMainMenu(chatId, userId), 2000);
}

// AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç
async function handleAIConsultant(chatId, text) {
  try {
    await sendMessage(chatId, "ü§î –î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º...");
    
    const response = await getAbacusResponse(text);
    await sendMessage(chatId, response);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞:', error);
    await sendMessage(chatId, 
      "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. " +
      "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    );
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–∫–∏–¥–∫–∏
async function showDiscounts(chatId) {
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
    ]
  };

  await sendMessage(chatId, 
    "üí∏ **–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏:**\n\n" +
    "üéâ **–ù–æ–≤—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º** ‚Äî —Å–∫–∏–¥–∫–∞ 10% –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ—Å—ã–ª–∫—É\n" +
    "üì¶ **–ü—Ä–∏ –≤–µ—Å–µ –æ—Ç 5 –∫–≥** ‚Äî —Å–∫–∏–¥–∫–∞ 5%\n" +
    "üöÄ **Qwintry Smart** ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞\n" +
    "üíé **VIP-–∫–ª–∏–µ–Ω—Ç–∞–º** ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –¥–æ 15%\n\n" +
    "üîó –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ: https://qwintry.com/ru/discounts",
    keyboard
  );
}

// –ü–æ–∫–∞–∑–∞—Ç—å FAQ
async function showFAQ(chatId) {
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
    ]
  };

  await sendMessage(chatId, 
    "‚ÑπÔ∏è **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**\n\n" +
    "‚ùì **–°–∫–æ–ª—å–∫–æ –∏–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?**\n" +
    "‚Ä¢ Flash: 21-30 –¥–Ω–µ–π\n" +
    "‚Ä¢ Economy: 14-20 –¥–Ω–µ–π\n" +
    "‚Ä¢ Air: 21-30 –¥–Ω–µ–π\n" +
    "‚Ä¢ Smart: 15-30 –¥–Ω–µ–π\n\n" +
    "‚ùì **–ö–∞–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤–µ—Å—É?**\n" +
    "–î–æ 50 –∫–≥ –≤ –æ–¥–Ω–æ–π –ø–æ—Å—ã–ª–∫–µ\n\n" +
    "‚ùì **–ï—Å—Ç—å –ª–∏ —Ç–∞–º–æ–∂–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è?**\n" +
    "–î–ª—è –†–æ—Å—Å–∏–∏: –¥–æ ‚Ç¨200 –±–µ–∑ –ø–æ—à–ª–∏–Ω\n\n" +
    "‚ùì **–ö–∞–∫ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É?**\n" +
    "–í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –Ω–∞ qwintry.com\n\n" +
    "üîó –ë–æ–ª—å—à–µ –æ—Ç–≤–µ—Ç–æ–≤: https://qwintry.com/ru/faq",
    keyboard
  );
}

// –ö–æ–º–∞–Ω–¥–∞ /help
async function handleHelpCommand(chatId) {
  await sendMessage(chatId,
    "üìñ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**\n\n" +
    "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é** ‚Äî /menu\n" +
    "üì¶ **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä** ‚Äî /calc\n" +
    "‚ùì **–ü–æ–º–æ—â—å** ‚Äî /help\n\n" +
    "üí¨ **–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞–ø—Ä—è–º—É—é!**\n" +
    "–Ø –æ—Ç–≤–µ—á—É –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –¥–æ—Å—Ç–∞–≤–∫–µ, —Ç–∞—Ä–∏—Ñ–∞—Ö, —Å—Ä–æ–∫–∞—Ö –∏ –º–Ω–æ–≥–æ–º –¥—Ä—É–≥–æ–º.\n\n" +
    "üìã **–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**\n" +
    "‚Ä¢ –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –ì–µ—Ä–º–∞–Ω–∏—é?\n" +
    "‚Ä¢ –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ç–∞–º–æ–∂–Ω–∏?\n" +
    "‚Ä¢ –ö–∞–∫ —É–ø–∞–∫–æ–≤–∞—Ç—å —Ö—Ä—É–ø–∫–∏–µ —Ç–æ–≤–∞—Ä—ã?\n" +
    "‚Ä¢ –ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è?"
  );
}

// –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async function findCountry(query) {
  const normalizedQuery = query.toLowerCase().trim();
  
  // –ü–æ–∏—Å–∫ –≤ —Å–ª–æ–≤–∞—Ä–µ
  if (COUNTRIES_DICT[normalizedQuery]) {
    console.log(`üéØ –°—Ç—Ä–∞–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ: ${COUNTRIES_DICT[normalizedQuery].name}`);
    return COUNTRIES_DICT[normalizedQuery];
  }

  // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API
  try {
    if (!countriesCache) {
      console.log('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –∏–∑ API...');
      const response = await fetch('https://q3-api.qwintry.com/ru/countries');
      if (response.ok) {
        countriesCache = await response.json();
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${countriesCache.length} —Å—Ç—Ä–∞–Ω`);
      }
    }

    if (countriesCache && Array.isArray(countriesCache)) {
      const found = countriesCache.find(country => 
        country.nameRu?.toLowerCase().includes(normalizedQuery) ||
        country.nameEn?.toLowerCase().includes(normalizedQuery) ||
        country.code?.toLowerCase() === normalizedQuery ||
        country.id?.toString() === normalizedQuery
      );

      if (found) {
        console.log(`üéØ –°—Ç—Ä–∞–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ API: ${found.nameRu || found.nameEn}`);
        return { id: found.id, name: found.nameRu || found.nameEn };
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω—ã —á–µ—Ä–µ–∑ API:', error);
  }

  console.log(`‚ùå –°—Ç—Ä–∞–Ω–∞ "${query}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
  return null;
}

// –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async function findCity(query, countryId) {
  const normalizedQuery = query.toLowerCase().trim();
  
  // –ü–æ–∏—Å–∫ –≤ —Å–ª–æ–≤–∞—Ä–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –†–æ—Å—Å–∏–∏)
  if (countryId === 71 && CITIES_DICT[normalizedQuery]) {
    console.log(`üéØ –ì–æ—Ä–æ–¥ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ: ${CITIES_DICT[normalizedQuery].name}`);
    return CITIES_DICT[normalizedQuery];
  }

  // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API
  try {
    const cacheKey = `${countryId}_${normalizedQuery}`;
    
    if (!citiesCache[cacheKey]) {
      console.log(`üì° –ò—â–µ–º –≥–æ—Ä–æ–¥ "${query}" –≤ —Å—Ç—Ä–∞–Ω–µ ${countryId}...`);
      
      const response = await fetch(
        `https://q3-api.qwintry.com/ru/cities?country_id=${countryId}&query=${encodeURIComponent(query)}`
      );
      
      if (response.ok) {
        const cities = await response.json();
        citiesCache[cacheKey] = cities;
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${cities.length} –≥–æ—Ä–æ–¥–æ–≤`);
      }
    }

    const cities = citiesCache[cacheKey];
    if (cities && Array.isArray(cities) && cities.length > 0) {
      const found = cities.find(city => 
        city.nameRu?.toLowerCase() === normalizedQuery ||
        city.nameEn?.toLowerCase() === normalizedQuery
      ) || cities[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥

      if (found) {
        console.log(`üéØ –ì–æ—Ä–æ–¥ –Ω–∞–π–¥–µ–Ω: ${found.nameRu || found.nameEn}`);
        return { id: found.id, name: found.nameRu || found.nameEn };
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ API:', error);
  }

  console.log(`‚ùå –ì–æ—Ä–æ–¥ "${query}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  return null;
}

// –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ hubCode)
async function calculateDelivery(weight, countryId, cityId, hubCode = 'US1') {
  try {
    console.log(`üìä –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: –≤–µ—Å=${weight}–∫–≥, —Å—Ç—Ä–∞–Ω–∞=${countryId}, –≥–æ—Ä–æ–¥=${cityId}, hub=${hubCode}`);

    const params = new URLSearchParams({
      weight: weight.toString(),
      country: countryId.toString(),
      city: cityId.toString(),
      weightMeasurement: 'kg',
      dimensions: '1x1x1',
      dimensionsMeasurement: 'cm',
      hubCode: hubCode
    });

    const response = await fetch('https://q3-api.qwintry.com/ru/calculate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json'
      },
      body: params.toString()
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const data = await response.json();
    console.log('üì¶ –û—Ç–≤–µ—Ç API –ø–æ–ª—É—á–µ–Ω:', JSON.stringify(data, null, 2));

    if (!data.costs || Object.keys(data.costs).length === 0) {
      return {
        success: false,
        error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞'
      };
    }

    return { success: true, data };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:', error);
    return {
      success: false,
      error: `–û—à–∏–±–∫–∞ API: ${error.message}`
    };
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)
function formatDeliveryResult(data, warehouseName, countryName, cityName, weight) {
  if (!data.costs || Object.keys(data.costs).length === 0) {
    return "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.";
  }

  let message = `üì¶ **–î–æ—Å—Ç–∞–≤–∫–∞ ${warehouseName} ‚Üí ${countryName}, ${cityName}**\n`;
  message += `‚öñÔ∏è –í–µ—Å: ${weight} –∫–≥\n\n`;

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ—ã –ø–æ —Ü–µ–Ω–µ
  const sortedTariffs = Object.entries(data.costs)
    .map(([key, option]) => ({
      key,
      option,
      price: option.cost?.totalCostWithDiscount || option.cost?.totalCost || 0
    }))
    .sort((a, b) => a.price - b.price);

  for (const { key, option } of sortedTariffs) {
    if (!option?.cost) continue;

    const emoji = TARIFF_EMOJIS[key] || 'üì¶';
    let label = option.cost.label || key;
    
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤
    if (key === 'qwintry_flash') label = 'Qwintry Flash';
    if (key === 'ecopost') label = 'Qwintry Economy';
    if (key === 'qwair') label = 'Qwintry Air';
    if (key === 'qwintry_smart') label = 'Qwintry Smart';

    const price = option.cost.totalCostWithDiscount || option.cost.totalCost;
    const currency = option.cost.currency || '$';
    const days = option.days || '‚Äî';

    message += `${emoji} **${label}** ‚Äî ${currency}${price} (${days} –¥–Ω–µ–π)\n`;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–º–æ–∂–Ω–µ –¥–ª—è –†–æ—Å—Å–∏–∏
  if (data.country_info?.customs_limit) {
    message += `\nüí° **–¢–∞–º–æ–∂–Ω—è:** ${data.country_info.customs_limit}`;
  }

  message += `\n\nüîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ](https://qwintry.com/ru/calculator)`;

  return message;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
async function sendMessage(chatId, text, keyboard = null) {
  try {
    const payload = {
      chat_id: chatId,
      text: text,
      parse_mode: 'Markdown',
      disable_web_page_preview: true
    };

    if (keyboard) {
      payload.reply_markup = keyboard;
    }

    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      const errorData = await response.json();
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', errorData);
    } else {
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ callback query
async function answerCallbackQuery(callbackQueryId, text = '') {
  try {
    await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text: text
      }),
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ answerCallbackQuery:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Abacus AI
async function getAbacusResponse(message) {
  try {
    const response = await fetch('https://api.abacus.ai/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${ABACUS_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å Qwintry (–ë–∞–Ω–¥–µ—Ä–æ–ª—å–∫–∞). –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ü–æ–º–æ–≥–∞–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –¥–æ—Å—Ç–∞–≤–∫–µ, —Ç–∞—Ä–∏—Ñ–∞—Ö, —Å—Ä–æ–∫–∞—Ö, —Ç–∞–º–æ–∂–Ω–µ, —É–ø–∞–∫–æ–≤–∫–µ —Ç–æ–≤–∞—Ä–æ–≤.'
          },
          {
            role: 'user',
            content: message
          }
        ],
        max_tokens: 500,
        temperature: 0.7
      }),
    });

    if (response.ok) {
      const data = await response.json();
      return data.choices[0]?.message?.content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.';
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Abacus AI:', error);
  }
  
  return '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.';
}
