// /api/lib/ai.js
import { sendMessage } from './utils.js';

const APPS_GET_CHAT_URL = 'https://apps.abacus.ai/api/getChatResponse';
const DEPLOYMENT_ID = process.env.ABACUS_DEPLOYMENT_ID || '1413dbc596';
const ABACUS_DEPLOYMENT_TOKEN = process.env.ABACUS_DEPLOYMENT_TOKEN;

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤: { chatId: [ {is_user: true, text: "..."}, ... ] }
const sessions = {};
const MAX_HISTORY = 20; // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π (10 –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç)

export async function handleAICommand(chatId, userText) {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!sessions[chatId]) {
      sessions[chatId] = [];
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    sessions[chatId].push({ is_user: true, text: userText });

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (—á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑–¥—É–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã)
    if (sessions[chatId].length > MAX_HISTORY) {
      sessions[chatId] = sessions[chatId].slice(-MAX_HISTORY);
    }

    const url = `${APPS_GET_CHAT_URL}?deploymentToken=${encodeURIComponent(ABACUS_DEPLOYMENT_TOKEN)}&deploymentId=${encodeURIComponent(DEPLOYMENT_ID)}`;

    const body = {
      messages: sessions[chatId], // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
      conversationId: String(chatId),
      userId: String(chatId)
    };

    console.log('üîµ Calling Abacus with history length:', sessions[chatId].length);

    const resp = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body)
    });

    const raw = await resp.text();
    console.log('üîµ Abacus status:', resp.status, raw.slice(0, 400));

    let reply = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.';
    
    if (resp.ok) {
      try {
        const data = JSON.parse(raw || '{}');

        reply =
          data?.responseText ||
          data?.text ||
          data?.response ||
          data?.message ||
          data?.choices?.[0]?.message?.content ||
          data?.result?.text ||
          reply;

        // –§–æ—Ä–º–∞—Ç —Å –º–∞—Å—Å–∏–≤–æ–º messages
        if (!data?.responseText && data?.result?.messages?.length) {
          const lastAssistant = [...data.result.messages]
            .reverse()
            .find(m => m && m.is_user === false && typeof m.text === 'string');
          if (lastAssistant?.text) reply = lastAssistant.text;
        }

        if (!reply || typeof reply !== 'string' || !reply.trim()) {
          reply = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.';
        }
      } catch (e) {
        console.error('‚ùå JSON parse error:', e);
      }
    } else {
      console.error('‚ùå Abacus non-OK', resp.status, raw.slice(0, 500));
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    sessions[chatId].push({ is_user: false, text: reply });

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    if (sessions[chatId].length > MAX_HISTORY) {
      sessions[chatId] = sessions[chatId].slice(-MAX_HISTORY);
    }

    await sendMessage(chatId, `ü§ñ ${reply}`);
  } catch (e) {
    console.error('‚ùå AI error:', e);
    await sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.');
  }
}

// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /clear)
export function clearHistory(chatId) {
  if (sessions[chatId]) {
    delete sessions[chatId];
    console.log(`üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è chatId ${chatId} –æ—á–∏—â–µ–Ω–∞`);
  }
}
